
boota.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000744c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ac  080079ac  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080079ac  080079ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b4  080079b4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080079bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca4  20000060  08007a1c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d04  08007a1c  00024d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191db  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004135  00000000  00000000  000392ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0003d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ac  00000000  00000000  0003eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f29  00000000  00000000  0003fc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b253  00000000  00000000  00059bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098e0f  00000000  00000000  00074e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006400  00000000  00000000  0010dc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00114018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075d4 	.word	0x080075d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080075d4 	.word	0x080075d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <BL_fetch_hostCommand>:

/*---------------------------- Software Interface Definitions --------------------------*/


BL_status BL_fetch_hostCommand(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	BL_status state = BL_NACK;
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_state = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	71bb      	strb	r3, [r7, #6]
	uint8_t commandLength = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	717b      	strb	r3, [r7, #5]
	uint8_t commandCode = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	713b      	strb	r3, [r7, #4]
	memset(BL_buffer,0,BL_HOST_BUFFER_RX_LENGTH);
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	2100      	movs	r1, #0
 8000596:	4863      	ldr	r0, [pc, #396]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 8000598:	f006 fb98 	bl	8006ccc <memset>
	BL_print_message("\r\n Boot-loader started \r\n");
 800059c:	4862      	ldr	r0, [pc, #392]	; (8000728 <BL_fetch_hostCommand+0x1ac>)
 800059e:	f000 f8e1 	bl	8000764 <BL_print_message>

	uart_state = HAL_UART_Receive(BL_USART,BL_buffer, 1, HAL_MAX_DELAY);
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2201      	movs	r2, #1
 80005a8:	495e      	ldr	r1, [pc, #376]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80005aa:	4860      	ldr	r0, [pc, #384]	; (800072c <BL_fetch_hostCommand+0x1b0>)
 80005ac:	f002 fccf 	bl	8002f4e <HAL_UART_Receive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71bb      	strb	r3, [r7, #6]
	if(uart_state != HAL_OK)
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <BL_fetch_hostCommand+0x42>
		return state;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	e0ae      	b.n	800071c <BL_fetch_hostCommand+0x1a0>

	commandLength = BL_buffer[0];
 80005be:	4b59      	ldr	r3, [pc, #356]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	717b      	strb	r3, [r7, #5]
	uart_state = HAL_UART_Receive(BL_USART,&BL_buffer[1], commandLength, HAL_MAX_DELAY);
 80005c4:	797b      	ldrb	r3, [r7, #5]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	4958      	ldr	r1, [pc, #352]	; (8000730 <BL_fetch_hostCommand+0x1b4>)
 80005ce:	4857      	ldr	r0, [pc, #348]	; (800072c <BL_fetch_hostCommand+0x1b0>)
 80005d0:	f002 fcbd 	bl	8002f4e <HAL_UART_Receive>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71bb      	strb	r3, [r7, #6]
	if(uart_state != HAL_OK)
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BL_fetch_hostCommand+0x66>
		return state;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	e09c      	b.n	800071c <BL_fetch_hostCommand+0x1a0>

	commandCode = BL_buffer[1];
 80005e2:	4b50      	ldr	r3, [pc, #320]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	713b      	strb	r3, [r7, #4]
	switch(commandCode)
 80005e8:	793b      	ldrb	r3, [r7, #4]
 80005ea:	3b10      	subs	r3, #16
 80005ec:	2b11      	cmp	r3, #17
 80005ee:	f200 8090 	bhi.w	8000712 <BL_fetch_hostCommand+0x196>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <BL_fetch_hostCommand+0x7c>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	08000641 	.word	0x08000641
 80005fc:	08000653 	.word	0x08000653
 8000600:	08000665 	.word	0x08000665
 8000604:	08000677 	.word	0x08000677
 8000608:	08000689 	.word	0x08000689
 800060c:	0800069b 	.word	0x0800069b
 8000610:	080006ad 	.word	0x080006ad
 8000614:	080006bf 	.word	0x080006bf
 8000618:	080006d1 	.word	0x080006d1
 800061c:	080006e3 	.word	0x080006e3
 8000620:	08000713 	.word	0x08000713
 8000624:	08000713 	.word	0x08000713
 8000628:	08000713 	.word	0x08000713
 800062c:	08000713 	.word	0x08000713
 8000630:	08000713 	.word	0x08000713
 8000634:	08000713 	.word	0x08000713
 8000638:	080006f5 	.word	0x080006f5
 800063c:	08000707 	.word	0x08000707
	{
		case CBL_GET_VER_CMD:
			BL_print_message("CBL_GET_VER_VMD \r\n");
 8000640:	483c      	ldr	r0, [pc, #240]	; (8000734 <BL_fetch_hostCommand+0x1b8>)
 8000642:	f000 f88f 	bl	8000764 <BL_print_message>
			BL_Get_Version(BL_buffer);
 8000646:	4837      	ldr	r0, [pc, #220]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 8000648:	f000 f92a 	bl	80008a0 <BL_Get_Version>
			state = BL_OK;
 800064c:	2301      	movs	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
		break;
 8000650:	e063      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_GET_HELP_CMD:
			BL_print_message("CBL_GET_HELP \r\n");
 8000652:	4839      	ldr	r0, [pc, #228]	; (8000738 <BL_fetch_hostCommand+0x1bc>)
 8000654:	f000 f886 	bl	8000764 <BL_print_message>
			BL_Get_Help(BL_buffer);
 8000658:	4832      	ldr	r0, [pc, #200]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 800065a:	f000 f951 	bl	8000900 <BL_Get_Help>
			state = BL_OK;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
		break;
 8000662:	e05a      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_GET_CID_CMD:
			BL_print_message("ID IS 0x432 \r\n");
 8000664:	4835      	ldr	r0, [pc, #212]	; (800073c <BL_fetch_hostCommand+0x1c0>)
 8000666:	f000 f87d 	bl	8000764 <BL_print_message>
			BL_Get_Chip_Identification_Number(BL_buffer);
 800066a:	482e      	ldr	r0, [pc, #184]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 800066c:	f000 f97e 	bl	800096c <BL_Get_Chip_Identification_Number>
			state = BL_OK;
 8000670:	2301      	movs	r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
		break;
 8000674:	e051      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_GET_RDP_STATUS_CMD:
			BL_print_message("BL_Read_Protection_Level \r\n");
 8000676:	4832      	ldr	r0, [pc, #200]	; (8000740 <BL_fetch_hostCommand+0x1c4>)
 8000678:	f000 f874 	bl	8000764 <BL_print_message>
			BL_Read_Protection_Level(BL_buffer);
 800067c:	4829      	ldr	r0, [pc, #164]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 800067e:	f000 fab3 	bl	8000be8 <BL_Read_Protection_Level>
			state = BL_OK;
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
		break;
 8000686:	e048      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_GO_TO_ADDR_CMD:
			BL_print_message("BL_Jump_To_Address \r\n");
 8000688:	482e      	ldr	r0, [pc, #184]	; (8000744 <BL_fetch_hostCommand+0x1c8>)
 800068a:	f000 f86b 	bl	8000764 <BL_print_message>
			BL_Jump_To_Address(BL_buffer);
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 8000690:	f000 f9ce 	bl	8000a30 <BL_Jump_To_Address>
			state = BL_OK;
 8000694:	2301      	movs	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
		break;
 8000698:	e03f      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_FLASH_ERASE_CMD:
			BL_print_message("BL_Erase_Flash \r\n");
 800069a:	482b      	ldr	r0, [pc, #172]	; (8000748 <BL_fetch_hostCommand+0x1cc>)
 800069c:	f000 f862 	bl	8000764 <BL_print_message>
			BL_Erase_Flash(BL_buffer);
 80006a0:	4820      	ldr	r0, [pc, #128]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80006a2:	f000 fa5a 	bl	8000b5a <BL_Erase_Flash>
			state = BL_OK;
 80006a6:	2301      	movs	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
		break;
 80006aa:	e036      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_MEM_WRITE_CMD:
			BL_print_message("BL_Memory_Write \r\n");
 80006ac:	4827      	ldr	r0, [pc, #156]	; (800074c <BL_fetch_hostCommand+0x1d0>)
 80006ae:	f000 f859 	bl	8000764 <BL_print_message>
			BL_Memory_Write(BL_buffer);
 80006b2:	481c      	ldr	r0, [pc, #112]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80006b4:	f000 faa2 	bl	8000bfc <BL_Memory_Write>
			state = BL_OK;
 80006b8:	2301      	movs	r3, #1
 80006ba:	71fb      	strb	r3, [r7, #7]
		break;
 80006bc:	e02d      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_ED_W_PROTECT_CMD:
			BL_print_message("Enable or Disable write protect on different sectors of the user flash \r\n");
 80006be:	4824      	ldr	r0, [pc, #144]	; (8000750 <BL_fetch_hostCommand+0x1d4>)
 80006c0:	f000 f850 	bl	8000764 <BL_print_message>
			BL_Enable_RW_Protection(BL_buffer);
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80006c6:	f000 faa3 	bl	8000c10 <BL_Enable_RW_Protection>
			state = BL_OK;
 80006ca:	2301      	movs	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]
		break;
 80006ce:	e024      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_MEM_READ_CMD:
			BL_print_message("Read data from different memories of the microcontroller \r\n");
 80006d0:	4820      	ldr	r0, [pc, #128]	; (8000754 <BL_fetch_hostCommand+0x1d8>)
 80006d2:	f000 f847 	bl	8000764 <BL_print_message>
			BL_Memory_Read(BL_buffer);
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80006d8:	f000 faa4 	bl	8000c24 <BL_Memory_Read>
			state = BL_OK;
 80006dc:	2301      	movs	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
		break;
 80006e0:	e01b      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_READ_SECTOR_STATUS_CMD:
			BL_print_message("Read all the sector protection status \r\n");
 80006e2:	481d      	ldr	r0, [pc, #116]	; (8000758 <BL_fetch_hostCommand+0x1dc>)
 80006e4:	f000 f83e 	bl	8000764 <BL_print_message>
			BL_Get_Sector_Protection_Status(BL_buffer);
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80006ea:	f000 faa5 	bl	8000c38 <BL_Get_Sector_Protection_Status>
			state = BL_OK;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
		break;
 80006f2:	e012      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_OTP_READ_CMD:
			BL_print_message("Read the OTP contents \r\n");
 80006f4:	4819      	ldr	r0, [pc, #100]	; (800075c <BL_fetch_hostCommand+0x1e0>)
 80006f6:	f000 f835 	bl	8000764 <BL_print_message>
			BL_Read_OTP(BL_buffer);
 80006fa:	480a      	ldr	r0, [pc, #40]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 80006fc:	f000 faa6 	bl	8000c4c <BL_Read_OTP>
			state = BL_OK;
 8000700:	2301      	movs	r3, #1
 8000702:	71fb      	strb	r3, [r7, #7]
		break;
 8000704:	e009      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		case CBL_CHANGE_ROP_Level_CMD:
			BL_Change_Read_Protection_Level(BL_buffer);
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <BL_fetch_hostCommand+0x1a8>)
 8000708:	f000 faaa 	bl	8000c60 <BL_Change_Read_Protection_Level>
			state = BL_OK;
 800070c:	2301      	movs	r3, #1
 800070e:	71fb      	strb	r3, [r7, #7]
		break;
 8000710:	e003      	b.n	800071a <BL_fetch_hostCommand+0x19e>
		default:
			BL_print_message("Invalid command code received from host !! \r\n");
 8000712:	4813      	ldr	r0, [pc, #76]	; (8000760 <BL_fetch_hostCommand+0x1e4>)
 8000714:	f000 f826 	bl	8000764 <BL_print_message>
		break;
 8000718:	bf00      	nop
	}

	return state;
 800071a:	79fb      	ldrb	r3, [r7, #7]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000007c 	.word	0x2000007c
 8000728:	080075ec 	.word	0x080075ec
 800072c:	20000200 	.word	0x20000200
 8000730:	2000007d 	.word	0x2000007d
 8000734:	08007608 	.word	0x08007608
 8000738:	0800761c 	.word	0x0800761c
 800073c:	0800762c 	.word	0x0800762c
 8000740:	0800763c 	.word	0x0800763c
 8000744:	08007658 	.word	0x08007658
 8000748:	08007670 	.word	0x08007670
 800074c:	08007684 	.word	0x08007684
 8000750:	08007698 	.word	0x08007698
 8000754:	080076e4 	.word	0x080076e4
 8000758:	08007720 	.word	0x08007720
 800075c:	0800774c 	.word	0x0800774c
 8000760:	08007768 	.word	0x08007768

08000764 <BL_print_message>:

/*---------------------------- Static Functions Definitions ----------------------------*/

static void BL_print_message(uint8_t *format, ...)
{
 8000764:	b40f      	push	{r0, r1, r2, r3}
 8000766:	b580      	push	{r7, lr}
 8000768:	b09a      	sub	sp, #104	; 0x68
 800076a:	af00      	add	r7, sp, #0
	uint8_t message[100] = {0};
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2260      	movs	r2, #96	; 0x60
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f006 faa7 	bl	8006ccc <memset>
	va_list args;
	va_start(args,format);
 800077e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000782:	603b      	str	r3, [r7, #0]
	vsprintf(message, format, args);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800078a:	4618      	mov	r0, r3
 800078c:	f006 fa94 	bl	8006cb8 <vsiprintf>
	HAL_UART_Transmit(BL_USART,message,sizeof(message),HAL_MAX_DELAY);
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2264      	movs	r2, #100	; 0x64
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <BL_print_message+0x48>)
 800079a:	f002 fb4d 	bl	8002e38 <HAL_UART_Transmit>
	va_end(args);
}
 800079e:	bf00      	nop
 80007a0:	3768      	adds	r7, #104	; 0x68
 80007a2:	46bd      	mov	sp, r7
 80007a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a8:	b004      	add	sp, #16
 80007aa:	4770      	bx	lr
 80007ac:	20000200 	.word	0x20000200

080007b0 <BL_CRC_verification>:

static uint8_t BL_CRC_verification(uint8_t *pData, uint32_t data_len, uint32_t hostCRC)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	uint8_t CRC_state = CRC_VERIFICATION_PASSED;
 80007bc:	2301      	movs	r3, #1
 80007be:	75fb      	strb	r3, [r7, #23]
	uint32_t MCU_calculated_CRC = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
	uint32_t cnt = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
	uint32_t dataBuffer = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
	for(; cnt < data_len; ++cnt)
 80007cc:	e00f      	b.n	80007ee <BL_CRC_verification+0x3e>
	{
		dataBuffer = (uint32_t)pData[cnt];
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	613b      	str	r3, [r7, #16]
		MCU_calculated_CRC = HAL_CRC_Accumulate(BL_CRC, &dataBuffer, 1);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	; (8000820 <BL_CRC_verification+0x70>)
 80007e2:	f000 ffd7 	bl	8001794 <HAL_CRC_Accumulate>
 80007e6:	61f8      	str	r0, [r7, #28]
	for(; cnt < data_len; ++cnt)
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	3301      	adds	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3eb      	bcc.n	80007ce <BL_CRC_verification+0x1e>
	}

	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(BL_CRC);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <BL_CRC_verification+0x70>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <BL_CRC_verification+0x70>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f042 0201 	orr.w	r2, r2, #1
 8000804:	609a      	str	r2, [r3, #8]

	if(MCU_calculated_CRC == hostCRC)
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d101      	bne.n	8000812 <BL_CRC_verification+0x62>
		return CRC_state;
 800080e:	7dfb      	ldrb	r3, [r7, #23]
 8000810:	e002      	b.n	8000818 <BL_CRC_verification+0x68>

	CRC_state = CRC_VERIFICATION_FAILED;
 8000812:	2300      	movs	r3, #0
 8000814:	75fb      	strb	r3, [r7, #23]
	return CRC_state;
 8000816:	7dfb      	ldrb	r3, [r7, #23]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000144 	.word	0x20000144

08000824 <BL_send_ACK>:

static void BL_send_ACK(uint8_t reply_len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK[2] = {CBL_SEND_ACK, reply_len};
 800082e:	23cd      	movs	r3, #205	; 0xcd
 8000830:	733b      	strb	r3, [r7, #12]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_USART, ACK, 2, HAL_MAX_DELAY);
 8000836:	f107 010c 	add.w	r1, r7, #12
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	2202      	movs	r2, #2
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <BL_send_ACK+0x2c>)
 8000842:	f002 faf9 	bl	8002e38 <HAL_UART_Transmit>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000200 	.word	0x20000200

08000854 <BL_send_NACK>:

static void BL_send_NACK(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	uint8_t ACK = CBL_SEND_NACK;
 800085a:	23ab      	movs	r3, #171	; 0xab
 800085c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_USART, &ACK, 1, HAL_MAX_DELAY);
 800085e:	1df9      	adds	r1, r7, #7
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2201      	movs	r2, #1
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <BL_send_NACK+0x20>)
 8000868:	f002 fae6 	bl	8002e38 <HAL_UART_Transmit>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000200 	.word	0x20000200

08000878 <BL_send_to_host>:

static void BL_send_to_host(uint8_t *pData, uint8_t dataLen)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(BL_USART, pData, dataLen, HAL_MAX_DELAY);
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	b29a      	uxth	r2, r3
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <BL_send_to_host+0x24>)
 8000890:	f002 fad2 	bl	8002e38 <HAL_UART_Transmit>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000200 	.word	0x20000200

080008a0 <BL_Get_Version>:

static void BL_Get_Version(uint8_t *hostBuffer)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
#if DEBUG_FEATURE == DEBUG_ENABLE
	BL_print_message("BL_Get_Version\r\n");
#endif
	uint8_t BL_version[4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 80008a8:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80008ac:	60fb      	str	r3, [r7, #12]
	uint16_t CMD_length = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	82fb      	strh	r3, [r7, #22]
	uint32_t host_CRC = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]

	/* Extract the CRC32 and packet length sent by the HOST */
	CMD_length = hostBuffer[0] + 1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	3301      	adds	r3, #1
 80008be:	82fb      	strh	r3, [r7, #22]
	host_CRC = *((uint32_t *)((hostBuffer + CMD_length) - CRC_TYPE_SIZE_BYTE));
 80008c0:	8afb      	ldrh	r3, [r7, #22]
 80008c2:	3b04      	subs	r3, #4
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	if(BL_CRC_verification(hostBuffer,CMD_length - CRC_TYPE_SIZE_BYTE, host_CRC) == CRC_VERIFICATION_PASSED)
 80008cc:	8afb      	ldrh	r3, [r7, #22]
 80008ce:	3b04      	subs	r3, #4
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4619      	mov	r1, r3
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff6b 	bl	80007b0 <BL_CRC_verification>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d109      	bne.n	80008f4 <BL_Get_Version+0x54>
	{
#if DEBUG_FEATURE == DEBUG_ENABLE
		BL_print_message("ACK\r\n");
		BL_print_message("BL Ver: %d. %d. %d\r\n", BL_version[1], BL_version[2], BL_version[3]);
#else
		BL_send_ACK(4);
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff ff9f 	bl	8000824 <BL_send_ACK>
		BL_send_to_host(BL_version, 4);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2104      	movs	r1, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ffc3 	bl	8000878 <BL_send_to_host>
		BL_print_message("NACK\r\n");
#else
		BL_send_NACK();
#endif
	}
}
 80008f2:	e001      	b.n	80008f8 <BL_Get_Version+0x58>
		BL_send_NACK();
 80008f4:	f7ff ffae 	bl	8000854 <BL_send_NACK>
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <BL_Get_Help>:

static void BL_Get_Help(uint8_t *hostBuffer)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
#if DEBUG_FEATURE == DEBUG_ENABLE
	BL_print_message("BL_Get_Help\r\n");
#endif
	uint8_t Bootloader_Supported_CMDs[12] =
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <BL_Get_Help+0x68>)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    CBL_MEM_READ_CMD,
    CBL_READ_SECTOR_STATUS_CMD,
    CBL_OTP_READ_CMD,
    CBL_CHANGE_ROP_Level_CMD
	};
	uint16_t CMD_length = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	83fb      	strh	r3, [r7, #30]
	uint32_t host_CRC = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]

	/* Extract the CRC32 and packet length sent by the HOST */
	CMD_length = hostBuffer[0] + 1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	83fb      	strh	r3, [r7, #30]
	host_CRC = *((uint32_t *)((hostBuffer + CMD_length) - CRC_TYPE_SIZE_BYTE));
 8000926:	8bfb      	ldrh	r3, [r7, #30]
 8000928:	3b04      	subs	r3, #4
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	61bb      	str	r3, [r7, #24]

	/* CRC Verification */
	if(BL_CRC_verification(hostBuffer,CMD_length - CRC_TYPE_SIZE_BYTE, host_CRC) == CRC_VERIFICATION_PASSED)
 8000932:	8bfb      	ldrh	r3, [r7, #30]
 8000934:	3b04      	subs	r3, #4
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4619      	mov	r1, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ff38 	bl	80007b0 <BL_CRC_verification>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d109      	bne.n	800095a <BL_Get_Help+0x5a>
		Bootloader_Supported_CMDs[0], Bootloader_Supported_CMDs[1],  Bootloader_Supported_CMDs[2],
		Bootloader_Supported_CMDs[3], Bootloader_Supported_CMDs[4],  Bootloader_Supported_CMDs[5],
		Bootloader_Supported_CMDs[6], Bootloader_Supported_CMDs[7],  Bootloader_Supported_CMDs[8],
		Bootloader_Supported_CMDs[9], Bootloader_Supported_CMDs[10], Bootloader_Supported_CMDs[11]);
#else
		BL_send_ACK(12);
 8000946:	200c      	movs	r0, #12
 8000948:	f7ff ff6c 	bl	8000824 <BL_send_ACK>
		BL_send_to_host(Bootloader_Supported_CMDs, 12);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	210c      	movs	r1, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff90 	bl	8000878 <BL_send_to_host>
		BL_print_message("NACK\r\n");
#else
		BL_send_NACK();
#endif
	}
}
 8000958:	e001      	b.n	800095e <BL_Get_Help+0x5e>
		BL_send_NACK();
 800095a:	f7ff ff7b 	bl	8000854 <BL_send_NACK>
}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	08007798 	.word	0x08007798

0800096c <BL_Get_Chip_Identification_Number>:

static void BL_Get_Chip_Identification_Number(uint8_t *hostBuffer)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
#if DEBUG_FEATURE == DEBUG_ENABLE
	BL_print_message("BL_Get_Chip_Identification_Number\r\n");
#endif
	uint16_t CMD_length = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	82fb      	strh	r3, [r7, #22]
	uint32_t host_CRC = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
	uint16_t MCU_ID = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]

	/* Extract the CRC32 and packet length sent by the HOST */
	CMD_length = hostBuffer[0] + 1;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b29b      	uxth	r3, r3
 8000986:	3301      	adds	r3, #1
 8000988:	82fb      	strh	r3, [r7, #22]
	host_CRC = *((uint32_t *)((hostBuffer + CMD_length) - CRC_TYPE_SIZE_BYTE));
 800098a:	8afb      	ldrh	r3, [r7, #22]
 800098c:	3b04      	subs	r3, #4
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	if(BL_CRC_verification(hostBuffer,CMD_length - CRC_TYPE_SIZE_BYTE, host_CRC) == CRC_VERIFICATION_PASSED)
 8000996:	8afb      	ldrh	r3, [r7, #22]
 8000998:	3b04      	subs	r3, #4
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ff06 	bl	80007b0 <BL_CRC_verification>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d110      	bne.n	80009cc <BL_Get_Chip_Identification_Number+0x60>
	{
		/* Get the MCU chip identification number */
		MCU_ID = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <BL_Get_Chip_Identification_Number+0x6c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	81fb      	strh	r3, [r7, #14]
#if DEBUG_FEATURE == DEBUG_ENABLE
		BL_print_message("ACK\r\n");
		BL_print_message("BL MCU_ID: %d\r\n", MCU_ID);
#else
		/* Report chip identification number to HOST */
		BL_send_ACK(2);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f7ff ff33 	bl	8000824 <BL_send_ACK>
		BL_send_to_host((uint8_t *)&MCU_ID, 2);
 80009be:	f107 030e 	add.w	r3, r7, #14
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff57 	bl	8000878 <BL_send_to_host>
		BL_print_message("NACK\r\n");
#else
		BL_send_NACK();
#endif
	}
}
 80009ca:	e001      	b.n	80009d0 <BL_Get_Chip_Identification_Number+0x64>
		BL_send_NACK();
 80009cc:	f7ff ff42 	bl	8000854 <BL_send_NACK>
}
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	e0042000 	.word	0xe0042000

080009dc <Host_Address_Verification>:
	/*Jump to application*/
	ResetHandler_address();
}

static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401rct6_SRAM1_END)){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009ee:	d306      	bcc.n	80009fe <Host_Address_Verification+0x22>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <Host_Address_Verification+0x4c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d802      	bhi.n	80009fe <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e00c      	b.n	8000a18 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401rct6_FLASH_END)){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a04:	d306      	bcc.n	8000a14 <Host_Address_Verification+0x38>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <Host_Address_Verification+0x50>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d802      	bhi.n	8000a14 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e001      	b.n	8000a18 <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20010000 	.word	0x20010000
 8000a2c:	08040000 	.word	0x08040000

08000a30 <BL_Jump_To_Address>:

static void BL_Jump_To_Address(uint8_t *hostBuffer)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
#if DEBUG_FEATURE == DEBUG_ENABLE
	BL_print_message("BL_Jump_To_Address\r\n");
#endif
	uint16_t CMD_length = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	83fb      	strh	r3, [r7, #30]
	uint32_t host_CRC = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
	uint32_t jump_address = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	CMD_length = hostBuffer[0] + 1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3301      	adds	r3, #1
 8000a50:	83fb      	strh	r3, [r7, #30]
	host_CRC = *((uint32_t *)((hostBuffer + CMD_length) - CRC_TYPE_SIZE_BYTE));
 8000a52:	8bfb      	ldrh	r3, [r7, #30]
 8000a54:	3b04      	subs	r3, #4
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	61bb      	str	r3, [r7, #24]

	/* CRC Verification */
	if(BL_CRC_verification(hostBuffer,CMD_length - CRC_TYPE_SIZE_BYTE, host_CRC) == CRC_VERIFICATION_PASSED)
 8000a5e:	8bfb      	ldrh	r3, [r7, #30]
 8000a60:	3b04      	subs	r3, #4
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fea2 	bl	80007b0 <BL_CRC_verification>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d121      	bne.n	8000ab6 <BL_Jump_To_Address+0x86>
	{
#if DEBUG_FEATURE == DEBUG_ENABLE
		BL_print_message("ACK\r\n");
#else
		BL_send_ACK(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fed6 	bl	8000824 <BL_send_ACK>
#endif

		/* Extract the address form the HOST packet */
		jump_address = *((uint32_t *)&hostBuffer[2]);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a7e:	617b      	str	r3, [r7, #20]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(jump_address);
 8000a80:	6978      	ldr	r0, [r7, #20]
 8000a82:	f7ff ffab 	bl	80009dc <Host_Address_Verification>
 8000a86:	4603      	mov	r3, r0
 8000a88:	73fb      	strb	r3, [r7, #15]

		if(Address_Verification == ADDRESS_IS_VALID)
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10b      	bne.n	8000aa8 <BL_Jump_To_Address+0x78>
		{
#if (DEBUG_FEATURE == DEBUG_ENABLE)
			BL_print_message("Address verification succeeded \r\n");
#else
			/* Report address verification succeeded */
			BL_send_to_host((uint8_t *)&Address_Verification, 1);
 8000a90:	f107 030f 	add.w	r3, r7, #15
 8000a94:	2101      	movs	r1, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff feee 	bl	8000878 <BL_send_to_host>
#endif

			/* Prepare the address to jump */
			JumpPtr Jump_Address_ptr = (JumpPtr)(jump_address + 1);
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]

#if (DEBUG_FEATURE == DEBUG_ENABLE)
			BL_print_message("Jump to: 0x%X \r\n", Jump_Address_ptr);
#endif

			Jump_Address_ptr();
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4798      	blx	r3
		BL_print_message("NACK\r\n");
#else
		BL_send_NACK();
#endif
	}
}
 8000aa6:	e008      	b.n	8000aba <BL_Jump_To_Address+0x8a>
			BL_send_to_host((uint8_t *)&Address_Verification, 1);
 8000aa8:	f107 030f 	add.w	r3, r7, #15
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fee2 	bl	8000878 <BL_send_to_host>
}
 8000ab4:	e001      	b.n	8000aba <BL_Jump_To_Address+0x8a>
		BL_send_NACK();
 8000ab6:	f7ff fecd 	bl	8000854 <BL_send_NACK>
}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <perform_FLASH_erase>:

static uint8_t perform_FLASH_erase(uint8_t sector_number, uint8_t number_of_sectors)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b08a      	sub	sp, #40	; 0x28
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	460a      	mov	r2, r1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit = {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
			.NbSectors = number_of_sectors,
			.Sector = sector_number,
			.TypeErase = FLASH_TYPEERASE_SECTORS,
			.VoltageRange = FLASH_VOLTAGE_RANGE_3
		};
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t SectorError = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
	if(
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d828      	bhi.n	8000b4e <perform_FLASH_erase+0x8c>
		 ( (sector_number >= 0) && (sector_number < STM32F401RCT6_FLASH_NUMBER_OF_SECTORS) )
	   &&(sector_number + number_of_sectors <= STM32F401RCT6_FLASH_NUMBER_OF_SECTORS)
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	4413      	add	r3, r2
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	dc23      	bgt.n	8000b4e <perform_FLASH_erase+0x8c>
		)
	{
		/* Unlock the FLASH control register access */
    HAL_Status = HAL_FLASH_Unlock();
 8000b06:	f000 fe71 	bl	80017ec <HAL_FLASH_Unlock>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Perform a mass erase or erase the specified FLASH memory sectors */
		HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000b10:	f107 020c 	add.w	r2, r7, #12
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 ff3e 	bl	800199c <HAL_FLASHEx_Erase>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_SUCCESSFUL_ERASE == SectorError){
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d103      	bne.n	8000b36 <perform_FLASH_erase+0x74>
			Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b34:	e002      	b.n	8000b3c <perform_FLASH_erase+0x7a>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000b3c:	f000 fe78 	bl	8001830 <HAL_FLASH_Lock>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b46:	bf00      	nop
	}
	else
	{
		return Sector_Validity_Status;
	}
	return Sector_Validity_Status;
 8000b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b4c:	e001      	b.n	8000b52 <perform_FLASH_erase+0x90>
		return Sector_Validity_Status;
 8000b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <BL_Erase_Flash>:

static void BL_Erase_Flash(uint8_t *hostBuffer)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
#if DEBUG_FEATURE == DEBUG_ENABLE
	BL_print_message("BL_Erase_Flash\r\n");
#endif
	uint16_t CMD_length = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	82fb      	strh	r3, [r7, #22]
	uint32_t host_CRC = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
	uint8_t erase_status = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	737b      	strb	r3, [r7, #13]
	uint8_t sector_number = hostBuffer[2];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	73fb      	strb	r3, [r7, #15]
	uint8_t number_of_sectors = hostBuffer[3];
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	78db      	ldrb	r3, [r3, #3]
 8000b78:	73bb      	strb	r3, [r7, #14]

	/* Extract the CRC32 and packet length sent by the HOST */
	CMD_length = hostBuffer[0] + 1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3301      	adds	r3, #1
 8000b82:	82fb      	strh	r3, [r7, #22]
	host_CRC = *((uint32_t *)((hostBuffer + CMD_length) - CRC_TYPE_SIZE_BYTE));
 8000b84:	8afb      	ldrh	r3, [r7, #22]
 8000b86:	3b04      	subs	r3, #4
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	if((BL_CRC_verification(hostBuffer,CMD_length - CRC_TYPE_SIZE_BYTE, host_CRC) == CRC_VERIFICATION_PASSED))
 8000b90:	8afb      	ldrh	r3, [r7, #22]
 8000b92:	3b04      	subs	r3, #4
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4619      	mov	r1, r3
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe09 	bl	80007b0 <BL_CRC_verification>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d11b      	bne.n	8000bdc <BL_Erase_Flash+0x82>
	{
#if DEBUG_FEATURE == DEBUG_ENABLE
		BL_print_message("ACK\r\n");
#else
		BL_send_ACK(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fe3d 	bl	8000824 <BL_send_ACK>
#endif
		erase_status = perform_FLASH_erase(sector_number, number_of_sectors);
 8000baa:	7bba      	ldrb	r2, [r7, #14]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff86 	bl	8000ac2 <perform_FLASH_erase>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	737b      	strb	r3, [r7, #13]
		if(erase_status == SUCCESSFUL_ERASE)
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d106      	bne.n	8000bce <BL_Erase_Flash+0x74>
		{
#if DEBUG_FEATURE == DEBUG_ENABLE
			BL_print_message("Sector %d to sector %d was erased\r\n", sector_number, sector_number + number_of_sectors);
#else
			BL_send_to_host(&erase_status, 1);
 8000bc0:	f107 030d 	add.w	r3, r7, #13
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe56 	bl	8000878 <BL_send_to_host>
		BL_print_message("NACK\r\n");
#else
		BL_send_NACK();
#endif
	}
}
 8000bcc:	e008      	b.n	8000be0 <BL_Erase_Flash+0x86>
			BL_send_to_host(&erase_status, 1);
 8000bce:	f107 030d 	add.w	r3, r7, #13
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe4f 	bl	8000878 <BL_send_to_host>
}
 8000bda:	e001      	b.n	8000be0 <BL_Erase_Flash+0x86>
		BL_send_NACK();
 8000bdc:	f7ff fe3a 	bl	8000854 <BL_send_NACK>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <BL_Read_Protection_Level>:

static void BL_Read_Protection_Level(uint8_t *hostBuffer)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <BL_Memory_Write>:
static void BL_Memory_Write(uint8_t *hostBuffer)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <BL_Enable_RW_Protection>:
static void BL_Enable_RW_Protection(uint8_t *hostBuffer)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <BL_Memory_Read>:
static void BL_Memory_Read(uint8_t *hostBuffer)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <BL_Get_Sector_Protection_Status>:
static void BL_Get_Sector_Protection_Status(uint8_t *hostBuffer)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <BL_Read_OTP>:
static void BL_Read_OTP(uint8_t *hostBuffer)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <BL_Change_Read_Protection_Level>:
static void BL_Change_Read_Protection_Level(uint8_t *hostBuffer)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_CRC_Init+0x20>)
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <MX_CRC_Init+0x24>)
 8000c7c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_CRC_Init+0x20>)
 8000c80:	f000 fd6c 	bl	800175c <HAL_CRC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c8a:	f000 fa3d 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000144 	.word	0x20000144
 8000c98:	40023000 	.word	0x40023000

08000c9c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_CRC_MspInit+0x3c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_CRC_MspInit+0x40>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_CRC_MspInit+0x40>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_CRC_MspInit+0x40>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023000 	.word	0x40023000
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <BL_print_message>:
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
static void BL_print_message(uint8_t *format, ...)
{
 8000ce0:	b40f      	push	{r0, r1, r2, r3}
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b09a      	sub	sp, #104	; 0x68
 8000ce6:	af00      	add	r7, sp, #0
	uint8_t message[100] = {0};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2260      	movs	r2, #96	; 0x60
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f005 ffe9 	bl	8006ccc <memset>
	va_list args;
	va_start(args,format);
 8000cfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cfe:	603b      	str	r3, [r7, #0]
	vsprintf(message, format, args);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 ffd6 	bl	8006cb8 <vsiprintf>
	HAL_UART_Transmit(BL_USART,message,sizeof(message),HAL_MAX_DELAY);
 8000d0c:	1d39      	adds	r1, r7, #4
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	2264      	movs	r2, #100	; 0x64
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <BL_print_message+0x48>)
 8000d16:	f002 f88f 	bl	8002e38 <HAL_UART_Transmit>
	va_end(args);
}
 8000d1a:	bf00      	nop
 8000d1c:	3768      	adds	r7, #104	; 0x68
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr
 8000d28:	20000200 	.word	0x20000200

08000d2c <Non_Reentrant_Fun>:

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
uint32_t Shared_Resourse;
uint8_t Non_Reentrant_Fun(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	Shared_Resourse++;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <Non_Reentrant_Fun+0x1c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <Non_Reentrant_Fun+0x1c>)
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000014c 	.word	0x2000014c

08000d4c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <MX_FREERTOS_Init+0x78>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	2001      	movs	r0, #1
 8000d66:	f002 fdf4 	bl	8003952 <osSemaphoreNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <MX_FREERTOS_Init+0x7c>)
 8000d6e:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <MX_FREERTOS_Init+0x80>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	2002      	movs	r0, #2
 8000d76:	f002 fdec 	bl	8003952 <osSemaphoreNew>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <MX_FREERTOS_Init+0x84>)
 8000d7e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Mytask1 */
  Mytask1Handle = osThreadNew(StartTask01, NULL, &Mytask1_attributes);
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <MX_FREERTOS_Init+0x88>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4818      	ldr	r0, [pc, #96]	; (8000de8 <MX_FREERTOS_Init+0x8c>)
 8000d86:	f002 fd37 	bl	80037f8 <osThreadNew>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <MX_FREERTOS_Init+0x90>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <MX_FREERTOS_Init+0x94>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <MX_FREERTOS_Init+0x98>)
 8000d96:	f002 fd2f 	bl	80037f8 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <MX_FREERTOS_Init+0x9c>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_FREERTOS_Init+0xa0>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4816      	ldr	r0, [pc, #88]	; (8000e00 <MX_FREERTOS_Init+0xa4>)
 8000da6:	f002 fd27 	bl	80037f8 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MX_FREERTOS_Init+0xa8>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000db0:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <MX_FREERTOS_Init+0xac>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4815      	ldr	r0, [pc, #84]	; (8000e0c <MX_FREERTOS_Init+0xb0>)
 8000db6:	f002 fd1f 	bl	80037f8 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <MX_FREERTOS_Init+0xb4>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <MX_FREERTOS_Init+0xb8>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_FREERTOS_Init+0xbc>)
 8000dc6:	f002 fd17 	bl	80037f8 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_FREERTOS_Init+0xc0>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	08007940 	.word	0x08007940
 8000dd8:	20000164 	.word	0x20000164
 8000ddc:	08007950 	.word	0x08007950
 8000de0:	20000168 	.word	0x20000168
 8000de4:	0800788c 	.word	0x0800788c
 8000de8:	08000e21 	.word	0x08000e21
 8000dec:	20000150 	.word	0x20000150
 8000df0:	080078b0 	.word	0x080078b0
 8000df4:	08000e4d 	.word	0x08000e4d
 8000df8:	20000154 	.word	0x20000154
 8000dfc:	080078d4 	.word	0x080078d4
 8000e00:	08000e85 	.word	0x08000e85
 8000e04:	20000158 	.word	0x20000158
 8000e08:	080078f8 	.word	0x080078f8
 8000e0c:	08000ec5 	.word	0x08000ec5
 8000e10:	2000015c 	.word	0x2000015c
 8000e14:	0800791c 	.word	0x0800791c
 8000e18:	08000ef9 	.word	0x08000ef9
 8000e1c:	20000160 	.word	0x20000160

08000e20 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	  BL_print_message("\r\n Task1 is released -> \n");
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <StartTask01+0x24>)
 8000e2a:	f7ff ff59 	bl	8000ce0 <BL_print_message>
	  osSemaphoreRelease(myCountingSem01Handle);
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <StartTask01+0x28>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fe68 	bl	8003b08 <osSemaphoreRelease>
	  osDelay(2000);
 8000e38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e3c:	f002 fd6e 	bl	800391c <osDelay>
	  BL_print_message("\r\n Task1 is released -> \n");
 8000e40:	e7f2      	b.n	8000e28 <StartTask01+0x8>
 8000e42:	bf00      	nop
 8000e44:	080077fc 	.word	0x080077fc
 8000e48:	20000168 	.word	0x20000168

08000e4c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t Task_Counter = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	BL_print_message("\r\n Task2 is running %d \r\n", Task_Counter);
 8000e58:	68f9      	ldr	r1, [r7, #12]
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <StartTask02+0x30>)
 8000e5c:	f7ff ff40 	bl	8000ce0 <BL_print_message>
	Task_Counter++;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
	osSemaphoreRelease(myCountingSem01Handle);
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <StartTask02+0x34>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fe4c 	bl	8003b08 <osSemaphoreRelease>
	osDelay(2000);
 8000e70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e74:	f002 fd52 	bl	800391c <osDelay>
	BL_print_message("\r\n Task2 is running %d \r\n", Task_Counter);
 8000e78:	e7ee      	b.n	8000e58 <StartTask02+0xc>
 8000e7a:	bf00      	nop
 8000e7c:	08007818 	.word	0x08007818
 8000e80:	20000168 	.word	0x20000168

08000e84 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t Task_Counter = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <StartTask03+0x38>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fde3 	bl	8003a64 <osSemaphoreAcquire>
	osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <StartTask03+0x38>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fddc 	bl	8003a64 <osSemaphoreAcquire>
	BL_print_message("\r\n Task3 is running %d \r\n", Task_Counter);
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <StartTask03+0x3c>)
 8000eb0:	f7ff ff16 	bl	8000ce0 <BL_print_message>
	Task_Counter++;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000eba:	e7e9      	b.n	8000e90 <StartTask03+0xc>
 8000ebc:	20000168 	.word	0x20000168
 8000ec0:	08007834 	.word	0x08007834

08000ec4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myBinarySem01Handle, 4000);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <StartTask04+0x30>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fdc5 	bl	8003a64 <osSemaphoreAcquire>
	Non_Reentrant_Fun();
 8000eda:	f7ff ff27 	bl	8000d2c <Non_Reentrant_Fun>
	osSemaphoreRelease(myBinarySem01Handle);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <StartTask04+0x30>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 fe10 	bl	8003b08 <osSemaphoreRelease>
    osDelay(4000);
 8000ee8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000eec:	f002 fd16 	bl	800391c <osDelay>
	osSemaphoreAcquire(myBinarySem01Handle, 4000);
 8000ef0:	e7ec      	b.n	8000ecc <StartTask04+0x8>
 8000ef2:	bf00      	nop
 8000ef4:	20000164 	.word	0x20000164

08000ef8 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myBinarySem01Handle, 4000);
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <StartTask05+0x38>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fdab 	bl	8003a64 <osSemaphoreAcquire>
	BL_print_message("\r\n shared resource updated %d \r\n", Shared_Resourse);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <StartTask05+0x3c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <StartTask05+0x40>)
 8000f16:	f7ff fee3 	bl	8000ce0 <BL_print_message>
	osSemaphoreRelease(myBinarySem01Handle);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <StartTask05+0x38>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fdf2 	bl	8003b08 <osSemaphoreRelease>
    osDelay(4000);
 8000f24:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000f28:	f002 fcf8 	bl	800391c <osDelay>
	osSemaphoreAcquire(myBinarySem01Handle, 4000);
 8000f2c:	e7e8      	b.n	8000f00 <StartTask05+0x8>
 8000f2e:	bf00      	nop
 8000f30:	20000164 	.word	0x20000164
 8000f34:	2000014c 	.word	0x2000014c
 8000f38:	08007850 	.word	0x08007850

08000f3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_GPIO_Init+0x9c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <MX_GPIO_Init+0xa0>)
 8000fae:	f000 ff9b 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_GPIO_Init+0xa0>)
 8000fcc:	f000 fe08 	bl	8001be0 <HAL_GPIO_Init>

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 fa96 	bl	8001514 <HAL_Init>
  //uint8_t mssg[] = "seif %d \r\n";

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f812 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f7ff ffa6 	bl	8000f3c <MX_GPIO_Init>
  MX_CRC_Init();
 8000ff0:	f7ff fe40 	bl	8000c74 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 f9be 	bl	8001374 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000ff8:	f000 f992 	bl	8001320 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ffc:	f002 fbb2 	bl	8003764 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001000:	f7ff feac 	bl	8000d5c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001004:	f002 fbd2 	bl	80037ac <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BL_fetch_hostCommand();
 8001008:	f7ff fab8 	bl	800057c <BL_fetch_hostCommand>
 800100c:	e7fc      	b.n	8001008 <main+0x28>
	...

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	; 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	; 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fe54 	bl	8006ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <SystemClock_Config+0xcc>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <SystemClock_Config+0xcc>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	; 0x40
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <SystemClock_Config+0xcc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <SystemClock_Config+0xd0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800105c:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <SystemClock_Config+0xd0>)
 800105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001084:	2308      	movs	r3, #8
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001088:	2354      	movs	r3, #84	; 0x54
 800108a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001090:	2304      	movs	r3, #4
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f000 ff3f 	bl	8001f1c <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010a4:	f000 f830 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 f9a1 	bl	800240c <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010d0:	f000 f81a 	bl	8001108 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3750      	adds	r7, #80	; 0x50
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f6:	f000 fa2f 	bl	8001558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_MspInit+0x54>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <HAL_MspInit+0x54>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x54>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_MspInit+0x54>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_MspInit+0x54>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x54>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	210f      	movs	r1, #15
 8001156:	f06f 0001 	mvn.w	r0, #1
 800115a:	f000 fad5 	bl	8001708 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_InitTick+0xd0>)
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	4a2d      	ldr	r2, [pc, #180]	; (800123c <HAL_InitTick+0xd0>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6453      	str	r3, [r2, #68]	; 0x44
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <HAL_InitTick+0xd0>)
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001198:	f107 020c 	add.w	r2, r7, #12
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fb52 	bl	800284c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011a8:	f001 fb3c 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 80011ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_InitTick+0xd4>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	3b01      	subs	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_InitTick+0xd8>)
 80011be:	4a22      	ldr	r2, [pc, #136]	; (8001248 <HAL_InitTick+0xdc>)
 80011c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_InitTick+0xd8>)
 80011c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <HAL_InitTick+0xd8>)
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_InitTick+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_InitTick+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_InitTick+0xd8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011e2:	4818      	ldr	r0, [pc, #96]	; (8001244 <HAL_InitTick+0xd8>)
 80011e4:	f001 fb64 	bl	80028b0 <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d11b      	bne.n	800122e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <HAL_InitTick+0xd8>)
 80011f8:	f001 fbb4 	bl	8002964 <HAL_TIM_Base_Start_IT>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001206:	2b00      	cmp	r3, #0
 8001208:	d111      	bne.n	800122e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800120a:	2019      	movs	r0, #25
 800120c:	f000 fa98 	bl	8001740 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d808      	bhi.n	8001228 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001216:	2200      	movs	r2, #0
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	2019      	movs	r0, #25
 800121c:	f000 fa74 	bl	8001708 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_InitTick+0xe0>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e002      	b.n	800122e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800122e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001232:	4618      	mov	r0, r3
 8001234:	3730      	adds	r7, #48	; 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	431bde83 	.word	0x431bde83
 8001244:	2000016c 	.word	0x2000016c
 8001248:	40010000 	.word	0x40010000
 800124c:	20000004 	.word	0x20000004

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001282:	f001 fbd1 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000016c 	.word	0x2000016c

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f005 fd0c 	bl	8006cdc <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20010000 	.word	0x20010000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200001b4 	.word	0x200001b4
 80012f8:	20004d08 	.word	0x20004d08

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART1_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001358:	f001 fd1e 	bl	8002d98 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f7ff fed1 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001b8 	.word	0x200001b8
 8001370:	40011000 	.word	0x40011000

08001374 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f001 fcf4 	bl	8002d98 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f7ff fea7 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000200 	.word	0x20000200
 80013c4:	40004400 	.word	0x40004400

080013c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <HAL_UART_MspInit+0xe8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12d      	bne.n	8001446 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_UART_MspInit+0xec>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <HAL_UART_MspInit+0xec>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_UART_MspInit+0xec>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_UART_MspInit+0xec>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <HAL_UART_MspInit+0xec>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_UART_MspInit+0xec>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001422:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	481e      	ldr	r0, [pc, #120]	; (80014b8 <HAL_UART_MspInit+0xf0>)
 8001440:	f000 fbce 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001444:	e030      	b.n	80014a8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_UART_MspInit+0xf4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d12b      	bne.n	80014a8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_UART_MspInit+0xec>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_UART_MspInit+0xec>)
 800145a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_UART_MspInit+0xec>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_UART_MspInit+0xec>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_UART_MspInit+0xec>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_UART_MspInit+0xec>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001488:	230c      	movs	r3, #12
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001498:	2307      	movs	r3, #7
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_UART_MspInit+0xf0>)
 80014a4:	f000 fb9c 	bl	8001be0 <HAL_GPIO_Init>
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40004400 	.word	0x40004400

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014c4:	f7ff ff1a 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ee:	f005 fbfb 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fd75 	bl	8000fe0 <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001504:	080079bc 	.word	0x080079bc
  ldr r2, =_sbss
 8001508:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800150c:	20004d04 	.word	0x20004d04

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_Init+0x40>)
 800151e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_Init+0x40>)
 800152a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x40>)
 8001536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f8d8 	bl	80016f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f7ff fe12 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fde4 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000248 	.word	0x20000248

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000248 	.word	0x20000248

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <__NVIC_EnableIRQ+0x38>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff4c 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171a:	f7ff ff61 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 800171e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	6978      	ldr	r0, [r7, #20]
 8001726:	f7ff ffb1 	bl	800168c <NVIC_EncodePriority>
 800172a:	4602      	mov	r2, r0
 800172c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff80 	bl	8001638 <__NVIC_SetPriority>
}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff54 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	795b      	ldrb	r3, [r3, #5]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fa8c 	bl	8000c9c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2202      	movs	r2, #2
 80017a8:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00a      	b.n	80017c6 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	441a      	add	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3f0      	bcc.n	80017b0 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80017dc:	693b      	ldr	r3, [r7, #16]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_FLASH_Unlock+0x38>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0b      	bge.n	8001816 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_FLASH_Unlock+0x38>)
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_FLASH_Unlock+0x3c>)
 8001802:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_FLASH_Unlock+0x38>)
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_FLASH_Unlock+0x40>)
 8001808:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_FLASH_Unlock+0x38>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da01      	bge.n	8001816 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001816:	79fb      	ldrb	r3, [r7, #7]
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40023c00 	.word	0x40023c00
 8001828:	45670123 	.word	0x45670123
 800182c:	cdef89ab 	.word	0xcdef89ab

08001830 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_FLASH_Lock+0x1c>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_FLASH_Lock+0x1c>)
 800183a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800183e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40023c00 	.word	0x40023c00

08001850 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <FLASH_WaitForLastOperation+0x78>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001862:	f7ff fe8d 	bl	8001580 <HAL_GetTick>
 8001866:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001868:	e010      	b.n	800188c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d00c      	beq.n	800188c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <FLASH_WaitForLastOperation+0x38>
 8001878:	f7ff fe82 	bl	8001580 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d201      	bcs.n	800188c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e019      	b.n	80018c0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <FLASH_WaitForLastOperation+0x7c>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e8      	bne.n	800186a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <FLASH_WaitForLastOperation+0x7c>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <FLASH_WaitForLastOperation+0x7c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <FLASH_WaitForLastOperation+0x7c>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018b6:	f000 f80b 	bl	80018d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
  
}  
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000024c 	.word	0x2000024c
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 80018ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 80018ee:	2210      	movs	r2, #16
 80018f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 8001908:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 800190c:	2220      	movs	r2, #32
 800190e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 8001926:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 8001944:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 8001962:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <FLASH_SetErrorCode+0xc8>)
 8001982:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <FLASH_SetErrorCode+0xc4>)
 8001986:	2202      	movs	r2, #2
 8001988:	60da      	str	r2, [r3, #12]
  }
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40023c00 	.word	0x40023c00
 8001998:	2000024c 	.word	0x2000024c

0800199c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_FLASHEx_Erase+0xd8>)
 80019b0:	7e1b      	ldrb	r3, [r3, #24]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_FLASHEx_Erase+0x1e>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e058      	b.n	8001a6c <HAL_FLASHEx_Erase+0xd0>
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_FLASHEx_Erase+0xd8>)
 80019bc:	2201      	movs	r2, #1
 80019be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019c4:	f7ff ff44 	bl	8001850 <FLASH_WaitForLastOperation>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d148      	bne.n	8001a64 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d115      	bne.n	8001a0e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f000 f844 	bl	8001a7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f8:	f7ff ff2a 	bl	8001850 <FLASH_WaitForLastOperation>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_FLASHEx_Erase+0xdc>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <HAL_FLASHEx_Erase+0xdc>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6113      	str	r3, [r2, #16]
 8001a0c:	e028      	b.n	8001a60 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	e01c      	b.n	8001a50 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f000 f850 	bl	8001ac4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a28:	f7ff ff12 	bl	8001850 <FLASH_WaitForLastOperation>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_FLASHEx_Erase+0xdc>)
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_FLASHEx_Erase+0xdc>)
 8001a36:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001a3a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	601a      	str	r2, [r3, #0]
          break;
 8001a48:	e00a      	b.n	8001a60 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3da      	bcc.n	8001a16 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001a60:	f000 f878 	bl	8001b54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_FLASHEx_Erase+0xd8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	761a      	strb	r2, [r3, #24]

  return status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000024c 	.word	0x2000024c
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <FLASH_MassErase+0x44>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <FLASH_MassErase+0x44>)
 8001a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <FLASH_MassErase+0x44>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <FLASH_MassErase+0x44>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <FLASH_MassErase+0x44>)
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <FLASH_MassErase+0x44>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6113      	str	r3, [r2, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00

08001ac4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e010      	b.n	8001b02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d103      	bne.n	8001aee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e009      	b.n	8001b02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d103      	bne.n	8001afc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e002      	b.n	8001b02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001afc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	490f      	ldr	r1, [pc, #60]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <FLASH_Erase_Sector+0x8c>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6113      	str	r3, [r2, #16]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d017      	beq.n	8001bd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001baa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <FLASH_FlushCaches+0x88>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6013      	str	r3, [r2, #0]
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e159      	b.n	8001eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8148 	bne.w	8001eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d005      	beq.n	8001c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d130      	bne.n	8001c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d017      	beq.n	8001cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d123      	bne.n	8001d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	69b9      	ldr	r1, [r7, #24]
 8001d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a2 	beq.w	8001eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_GPIO_Init+0x2e8>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_GPIO_Init+0x2e8>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <HAL_GPIO_Init+0x2e8>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d82:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_GPIO_Init+0x2ec>)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a49      	ldr	r2, [pc, #292]	; (8001ed0 <HAL_GPIO_Init+0x2f0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x202>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <HAL_GPIO_Init+0x2f4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x1fe>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a47      	ldr	r2, [pc, #284]	; (8001ed8 <HAL_GPIO_Init+0x2f8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a46      	ldr	r2, [pc, #280]	; (8001edc <HAL_GPIO_Init+0x2fc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x1f6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a45      	ldr	r2, [pc, #276]	; (8001ee0 <HAL_GPIO_Init+0x300>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x1f2>
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x204>
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x204>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x204>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x204>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x204>
 8001de2:	2300      	movs	r3, #0
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df4:	4935      	ldr	r1, [pc, #212]	; (8001ecc <HAL_GPIO_Init+0x2ec>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e26:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e50:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	f67f aea2 	bls.w	8001bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	619a      	str	r2, [r3, #24]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e267      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d075      	beq.n	8002026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d112      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f52:	4b82      	ldr	r3, [pc, #520]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5e:	d10b      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d05b      	beq.n	8002024 <HAL_RCC_OscConfig+0x108>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d157      	bne.n	8002024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e242      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d106      	bne.n	8001f90 <HAL_RCC_OscConfig+0x74>
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a75      	ldr	r2, [pc, #468]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <HAL_RCC_OscConfig+0xb0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x98>
 8001f9a:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6f      	ldr	r2, [pc, #444]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6c      	ldr	r2, [pc, #432]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0xb0>
 8001fb4:	4b69      	ldr	r3, [pc, #420]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a68      	ldr	r2, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b66      	ldr	r3, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fad4 	bl	8001580 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fad0 	bl	8001580 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e207      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xc0>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fac0 	bl	8001580 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff fabc 	bl	8001580 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1f3      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0xe8>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002032:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11c      	bne.n	8002084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b44      	ldr	r3, [pc, #272]	; (800215c <HAL_RCC_OscConfig+0x240>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x152>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1c7      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_RCC_OscConfig+0x240>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	e03a      	b.n	80020fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x244>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff fa75 	bl	8001580 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff fa71 	bl	8001580 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e1a8      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4925      	ldr	r1, [pc, #148]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x244>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa54 	bl	8001580 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020dc:	f7ff fa50 	bl	8001580 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e187      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d036      	beq.n	8002174 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d016      	beq.n	800213c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCC_OscConfig+0x248>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff fa34 	bl	8001580 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211c:	f7ff fa30 	bl	8001580 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e167      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x200>
 800213a:	e01b      	b.n	8002174 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x248>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7ff fa1d 	bl	8001580 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	e00e      	b.n	8002168 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fa19 	bl	8001580 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d907      	bls.n	8002168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e150      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
 800215c:	40023800 	.word	0x40023800
 8002160:	42470000 	.word	0x42470000
 8002164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ea      	bne.n	800214a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8097 	beq.w	80022b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b7d      	ldr	r3, [pc, #500]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a7c      	ldr	r2, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b77      	ldr	r3, [pc, #476]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b74      	ldr	r3, [pc, #464]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a73      	ldr	r2, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7ff f9d9 	bl	8001580 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7ff f9d5 	bl	8001580 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e10c      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x2ea>
 80021f8:	4b64      	ldr	r3, [pc, #400]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a63      	ldr	r2, [pc, #396]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e01c      	b.n	8002240 <HAL_RCC_OscConfig+0x324>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b05      	cmp	r3, #5
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x30c>
 800220e:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a5e      	ldr	r2, [pc, #376]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a5b      	ldr	r2, [pc, #364]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0x324>
 8002228:	4b58      	ldr	r3, [pc, #352]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	4b55      	ldr	r3, [pc, #340]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4a54      	ldr	r2, [pc, #336]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff f99a 	bl	8001580 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7ff f996 	bl	8001580 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0cb      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ee      	beq.n	8002250 <HAL_RCC_OscConfig+0x334>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7ff f984 	bl	8001580 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7ff f980 	bl	8001580 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0b5      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002292:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ee      	bne.n	800227c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	4a38      	ldr	r2, [pc, #224]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a1 	beq.w	80023fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d05c      	beq.n	8002380 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d141      	bne.n	8002352 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCC_OscConfig+0x478>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f954 	bl	8001580 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7ff f950 	bl	8001580 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e087      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	3b01      	subs	r3, #1
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	491b      	ldr	r1, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x478>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff f929 	bl	8001580 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f925 	bl	8001580 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e05c      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x416>
 8002350:	e054      	b.n	80023fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x478>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff f912 	bl	8001580 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff f90e 	bl	8001580 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e045      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x444>
 800237e:	e03d      	b.n	80023fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e038      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000
 8002394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4ec>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d028      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d121      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d11a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d111      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0cc      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d90c      	bls.n	8002448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d044      	beq.n	800252c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d119      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e06f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e067      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4934      	ldr	r1, [pc, #208]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7ff f840 	bl	8001580 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7ff f83c 	bl	8001580 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e04f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d20c      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fdda 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08007960 	.word	0x08007960
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b094      	sub	sp, #80	; 0x50
 80025de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	2300      	movs	r3, #0
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f0:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d00d      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x40>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	f200 80e1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x3a>
 800260a:	e0db      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002610:	e0db      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002616:	e0d8      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002618:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002620:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262e:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	099b      	lsrs	r3, r3, #6
 8002634:	2200      	movs	r2, #0
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
 8002638:	63fa      	str	r2, [r7, #60]	; 0x3c
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	2300      	movs	r3, #0
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4621      	mov	r1, r4
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	6139      	str	r1, [r7, #16]
 8002668:	4629      	mov	r1, r5
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800267c:	4659      	mov	r1, fp
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002686:	4651      	mov	r1, sl
 8002688:	018a      	lsls	r2, r1, #6
 800268a:	4651      	mov	r1, sl
 800268c:	ebb2 0801 	subs.w	r8, r2, r1
 8002690:	4659      	mov	r1, fp
 8002692:	eb63 0901 	sbc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	462b      	mov	r3, r5
 80026b8:	eb49 0303 	adc.w	r3, r9, r3
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ca:	4629      	mov	r1, r5
 80026cc:	024b      	lsls	r3, r1, #9
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d4:	4621      	mov	r1, r4
 80026d6:	024a      	lsls	r2, r1, #9
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	2200      	movs	r2, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e8:	f7fd fdca 	bl	8000280 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4613      	mov	r3, r2
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	e058      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	4611      	mov	r1, r2
 8002702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	f04f 0000 	mov.w	r0, #0
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	0159      	lsls	r1, r3, #5
 800271e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002722:	0150      	lsls	r0, r2, #5
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4641      	mov	r1, r8
 800272a:	ebb2 0a01 	subs.w	sl, r2, r1
 800272e:	4649      	mov	r1, r9
 8002730:	eb63 0b01 	sbc.w	fp, r3, r1
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002748:	ebb2 040a 	subs.w	r4, r2, sl
 800274c:	eb63 050b 	sbc.w	r5, r3, fp
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	00eb      	lsls	r3, r5, #3
 800275a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275e:	00e2      	lsls	r2, r4, #3
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	4643      	mov	r3, r8
 8002766:	18e3      	adds	r3, r4, r3
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	464b      	mov	r3, r9
 800276c:	eb45 0303 	adc.w	r3, r5, r3
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277e:	4629      	mov	r1, r5
 8002780:	028b      	lsls	r3, r1, #10
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002788:	4621      	mov	r1, r4
 800278a:	028a      	lsls	r2, r1, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	61fa      	str	r2, [r7, #28]
 8002798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279c:	f7fd fd70 	bl	8000280 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3750      	adds	r7, #80	; 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08007970 	.word	0x08007970

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	08007970 	.word	0x08007970

0800284c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	220f      	movs	r2, #15
 800285a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RCC_GetClockConfig+0x60>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0207 	and.w	r2, r3, #7
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40023c00 	.word	0x40023c00

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e041      	b.n	8002946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f839 	bl	800294e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 f9b2 	bl	8002c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e044      	b.n	8002a06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_TIM_Base_Start_IT+0xb0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d018      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x6c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d013      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x6c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <HAL_TIM_Base_Start_IT+0xb4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00e      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x6c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_Base_Start_IT+0xb8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d009      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x6c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_TIM_Base_Start_IT+0xbc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x6c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_TIM_Base_Start_IT+0xc0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d111      	bne.n	80029f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d010      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	e007      	b.n	8002a04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40014000 	.word	0x40014000

08002a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d020      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0202 	mvn.w	r2, #2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8d2 	bl	8002c1c <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8c4 	bl	8002c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f8d5 	bl	8002c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d020      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0204 	mvn.w	r2, #4
 8002aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8ac 	bl	8002c1c <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f89e 	bl	8002c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8af 	bl	8002c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f886 	bl	8002c1c <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f878 	bl	8002c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f889 	bl	8002c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0210 	mvn.w	r2, #16
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2208      	movs	r2, #8
 8002b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f860 	bl	8002c1c <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f852 	bl	8002c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f863 	bl	8002c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0201 	mvn.w	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe faa8 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8e6 	bl	8002d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f834 	bl	8002c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0220 	mvn.w	r2, #32
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8b8 	bl	8002d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <TIM_Base_SetConfig+0xfc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00f      	beq.n	8002c90 <TIM_Base_SetConfig+0x38>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c76:	d00b      	beq.n	8002c90 <TIM_Base_SetConfig+0x38>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <TIM_Base_SetConfig+0x100>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d007      	beq.n	8002c90 <TIM_Base_SetConfig+0x38>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a36      	ldr	r2, [pc, #216]	; (8002d5c <TIM_Base_SetConfig+0x104>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_Base_SetConfig+0x38>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a35      	ldr	r2, [pc, #212]	; (8002d60 <TIM_Base_SetConfig+0x108>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d108      	bne.n	8002ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <TIM_Base_SetConfig+0xfc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01b      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb0:	d017      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <TIM_Base_SetConfig+0x100>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <TIM_Base_SetConfig+0x104>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00f      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <TIM_Base_SetConfig+0x108>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <TIM_Base_SetConfig+0x10c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <TIM_Base_SetConfig+0x110>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <TIM_Base_SetConfig+0x114>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <TIM_Base_SetConfig+0xfc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d103      	bne.n	8002d28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 0201 	bic.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]
  }
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40000c00 	.word	0x40000c00
 8002d64:	40014000 	.word	0x40014000
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800

08002d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e042      	b.n	8002e30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fb02 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa09 	bl	80031f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d175      	bne.n	8002f44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Transmit+0x2c>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e06e      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2221      	movs	r2, #33	; 0x21
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fb83 	bl	8001580 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d108      	bne.n	8002ea4 <HAL_UART_Transmit+0x6c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eac:	e02e      	b.n	8002f0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f8df 	bl	800307c <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e03a      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e007      	b.n	8002efe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1cb      	bne.n	8002eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f8ab 	bl	800307c <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e006      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b08a      	sub	sp, #40	; 0x28
 8002f52:	af02      	add	r7, sp, #8
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	f040 8081 	bne.w	8003072 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_UART_Receive+0x2e>
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e079      	b.n	8003074 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2222      	movs	r2, #34	; 0x22
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f94:	f7fe faf4 	bl	8001580 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d108      	bne.n	8002fc2 <HAL_UART_Receive+0x74>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e003      	b.n	8002fca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002fca:	e047      	b.n	800305c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2120      	movs	r1, #32
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f850 	bl	800307c <UART_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e042      	b.n	8003074 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	b29a      	uxth	r2, r3
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3302      	adds	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e01f      	b.n	800304e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d007      	beq.n	8003028 <HAL_UART_Receive+0xda>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <HAL_UART_Receive+0xe8>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e008      	b.n	8003048 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003042:	b2da      	uxtb	r2, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1b2      	bne.n	8002fcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308c:	e03b      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d037      	beq.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fe fa73 	bl	8001580 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <UART_WaitOnFlagUntilTimeout+0x30>
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e03a      	b.n	8003126 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d020      	beq.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d01d      	beq.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d116      	bne.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f81d 	bl	800312e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2208      	movs	r2, #8
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e00f      	b.n	8003126 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	429a      	cmp	r2, r3
 8003122:	d0b4      	beq.n	800308e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800312e:	b480      	push	{r7}
 8003130:	b095      	sub	sp, #84	; 0x54
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800314c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003156:	643a      	str	r2, [r7, #64]	; 0x40
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800315c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e5      	bne.n	8003136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3314      	adds	r3, #20
 8003170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	61fb      	str	r3, [r7, #28]
   return(result);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	64bb      	str	r3, [r7, #72]	; 0x48
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800318a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d119      	bne.n	80031da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f023 0310 	bic.w	r3, r3, #16
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c6:	61ba      	str	r2, [r7, #24]
 80031c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	613b      	str	r3, [r7, #16]
   return(result);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e5      	bne.n	80031a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031e8:	bf00      	nop
 80031ea:	3754      	adds	r7, #84	; 0x54
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b0c0      	sub	sp, #256	; 0x100
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	ea40 0301 	orr.w	r3, r0, r1
 800321c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	431a      	orrs	r2, r3
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	431a      	orrs	r2, r3
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800324c:	f021 010c 	bic.w	r1, r1, #12
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800325a:	430b      	orrs	r3, r1
 800325c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	6999      	ldr	r1, [r3, #24]
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	ea40 0301 	orr.w	r3, r0, r1
 800327a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <UART_SetConfig+0x2cc>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d005      	beq.n	8003294 <UART_SetConfig+0xa0>
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b8d      	ldr	r3, [pc, #564]	; (80034c4 <UART_SetConfig+0x2d0>)
 8003290:	429a      	cmp	r2, r3
 8003292:	d104      	bne.n	800329e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003294:	f7ff fac6 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800329c:	e003      	b.n	80032a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800329e:	f7ff faad 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80032a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b0:	f040 810c 	bne.w	80034cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032c6:	4622      	mov	r2, r4
 80032c8:	462b      	mov	r3, r5
 80032ca:	1891      	adds	r1, r2, r2
 80032cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ce:	415b      	adcs	r3, r3
 80032d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032d6:	4621      	mov	r1, r4
 80032d8:	eb12 0801 	adds.w	r8, r2, r1
 80032dc:	4629      	mov	r1, r5
 80032de:	eb43 0901 	adc.w	r9, r3, r1
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f6:	4690      	mov	r8, r2
 80032f8:	4699      	mov	r9, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	eb18 0303 	adds.w	r3, r8, r3
 8003300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003304:	462b      	mov	r3, r5
 8003306:	eb49 0303 	adc.w	r3, r9, r3
 800330a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800331a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800331e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003322:	460b      	mov	r3, r1
 8003324:	18db      	adds	r3, r3, r3
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
 8003328:	4613      	mov	r3, r2
 800332a:	eb42 0303 	adc.w	r3, r2, r3
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
 8003330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003338:	f7fc ffa2 	bl	8000280 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <UART_SetConfig+0x2d4>)
 8003342:	fba3 2302 	umull	r2, r3, r3, r2
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	011c      	lsls	r4, r3, #4
 800334a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	1891      	adds	r1, r2, r2
 8003362:	64b9      	str	r1, [r7, #72]	; 0x48
 8003364:	415b      	adcs	r3, r3
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800336c:	4641      	mov	r1, r8
 800336e:	eb12 0a01 	adds.w	sl, r2, r1
 8003372:	4649      	mov	r1, r9
 8003374:	eb43 0b01 	adc.w	fp, r3, r1
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800338c:	4692      	mov	sl, r2
 800338e:	469b      	mov	fp, r3
 8003390:	4643      	mov	r3, r8
 8003392:	eb1a 0303 	adds.w	r3, sl, r3
 8003396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339a:	464b      	mov	r3, r9
 800339c:	eb4b 0303 	adc.w	r3, fp, r3
 80033a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033b8:	460b      	mov	r3, r1
 80033ba:	18db      	adds	r3, r3, r3
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
 80033be:	4613      	mov	r3, r2
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	647b      	str	r3, [r7, #68]	; 0x44
 80033c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ce:	f7fc ff57 	bl	8000280 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <UART_SetConfig+0x2d4>)
 80033da:	fba3 2301 	umull	r2, r3, r3, r1
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2264      	movs	r2, #100	; 0x64
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	1acb      	subs	r3, r1, r3
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ee:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <UART_SetConfig+0x2d4>)
 80033f0:	fba3 2302 	umull	r2, r3, r3, r2
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033fc:	441c      	add	r4, r3
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800340c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	1891      	adds	r1, r2, r2
 8003416:	63b9      	str	r1, [r7, #56]	; 0x38
 8003418:	415b      	adcs	r3, r3
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003420:	4641      	mov	r1, r8
 8003422:	1851      	adds	r1, r2, r1
 8003424:	6339      	str	r1, [r7, #48]	; 0x30
 8003426:	4649      	mov	r1, r9
 8003428:	414b      	adcs	r3, r1
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003438:	4659      	mov	r1, fp
 800343a:	00cb      	lsls	r3, r1, #3
 800343c:	4651      	mov	r1, sl
 800343e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003442:	4651      	mov	r1, sl
 8003444:	00ca      	lsls	r2, r1, #3
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	4603      	mov	r3, r0
 800344c:	4642      	mov	r2, r8
 800344e:	189b      	adds	r3, r3, r2
 8003450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003454:	464b      	mov	r3, r9
 8003456:	460a      	mov	r2, r1
 8003458:	eb42 0303 	adc.w	r3, r2, r3
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800346c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003474:	460b      	mov	r3, r1
 8003476:	18db      	adds	r3, r3, r3
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
 800347a:	4613      	mov	r3, r2
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800348a:	f7fc fef9 	bl	8000280 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <UART_SetConfig+0x2d4>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <UART_SetConfig+0x2d4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 0207 	and.w	r2, r3, #7
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4422      	add	r2, r4
 80034ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034bc:	e106      	b.n	80036cc <UART_SetConfig+0x4d8>
 80034be:	bf00      	nop
 80034c0:	40011000 	.word	0x40011000
 80034c4:	40011400 	.word	0x40011400
 80034c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034de:	4642      	mov	r2, r8
 80034e0:	464b      	mov	r3, r9
 80034e2:	1891      	adds	r1, r2, r2
 80034e4:	6239      	str	r1, [r7, #32]
 80034e6:	415b      	adcs	r3, r3
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ee:	4641      	mov	r1, r8
 80034f0:	1854      	adds	r4, r2, r1
 80034f2:	4649      	mov	r1, r9
 80034f4:	eb43 0501 	adc.w	r5, r3, r1
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	00eb      	lsls	r3, r5, #3
 8003502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003506:	00e2      	lsls	r2, r4, #3
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
 800350c:	4643      	mov	r3, r8
 800350e:	18e3      	adds	r3, r4, r3
 8003510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003514:	464b      	mov	r3, r9
 8003516:	eb45 0303 	adc.w	r3, r5, r3
 800351a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800352a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800353a:	4629      	mov	r1, r5
 800353c:	008b      	lsls	r3, r1, #2
 800353e:	4621      	mov	r1, r4
 8003540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003544:	4621      	mov	r1, r4
 8003546:	008a      	lsls	r2, r1, #2
 8003548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800354c:	f7fc fe98 	bl	8000280 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b60      	ldr	r3, [pc, #384]	; (80036d8 <UART_SetConfig+0x4e4>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	011c      	lsls	r4, r3, #4
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800356c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	61b9      	str	r1, [r7, #24]
 8003578:	415b      	adcs	r3, r3
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003580:	4641      	mov	r1, r8
 8003582:	1851      	adds	r1, r2, r1
 8003584:	6139      	str	r1, [r7, #16]
 8003586:	4649      	mov	r1, r9
 8003588:	414b      	adcs	r3, r1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003598:	4659      	mov	r1, fp
 800359a:	00cb      	lsls	r3, r1, #3
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a2:	4651      	mov	r1, sl
 80035a4:	00ca      	lsls	r2, r1, #3
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	4642      	mov	r2, r8
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035b4:	464b      	mov	r3, r9
 80035b6:	460a      	mov	r2, r1
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035d8:	4649      	mov	r1, r9
 80035da:	008b      	lsls	r3, r1, #2
 80035dc:	4641      	mov	r1, r8
 80035de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e2:	4641      	mov	r1, r8
 80035e4:	008a      	lsls	r2, r1, #2
 80035e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ea:	f7fc fe49 	bl	8000280 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <UART_SetConfig+0x4e4>)
 80035f6:	fba3 2301 	umull	r2, r3, r3, r1
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2264      	movs	r2, #100	; 0x64
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	1acb      	subs	r3, r1, r3
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	3332      	adds	r3, #50	; 0x32
 8003608:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <UART_SetConfig+0x4e4>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003614:	441c      	add	r4, r3
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	673b      	str	r3, [r7, #112]	; 0x70
 800361e:	677a      	str	r2, [r7, #116]	; 0x74
 8003620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	415b      	adcs	r3, r3
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	66bb      	str	r3, [r7, #104]	; 0x68
 8003666:	464b      	mov	r3, r9
 8003668:	460a      	mov	r2, r1
 800366a:	eb42 0303 	adc.w	r3, r2, r3
 800366e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
 800367a:	667a      	str	r2, [r7, #100]	; 0x64
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003688:	4649      	mov	r1, r9
 800368a:	008b      	lsls	r3, r1, #2
 800368c:	4641      	mov	r1, r8
 800368e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003692:	4641      	mov	r1, r8
 8003694:	008a      	lsls	r2, r1, #2
 8003696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800369a:	f7fc fdf1 	bl	8000280 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <UART_SetConfig+0x4e4>)
 80036a4:	fba3 1302 	umull	r1, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	2164      	movs	r1, #100	; 0x64
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	3332      	adds	r3, #50	; 0x32
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <UART_SetConfig+0x4e4>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4422      	add	r2, r4
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036d2:	46bd      	mov	sp, r7
 80036d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d8:	51eb851f 	.word	0x51eb851f

080036dc <__NVIC_SetPriority>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	490c      	ldr	r1, [pc, #48]	; (8003728 <__NVIC_SetPriority+0x4c>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4908      	ldr	r1, [pc, #32]	; (800372c <__NVIC_SetPriority+0x50>)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3b04      	subs	r3, #4
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <SysTick_Handler+0x1c>)
 8003736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003738:	f002 f940 	bl	80059bc <xTaskGetSchedulerState>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003742:	f003 f829 	bl	8006798 <xPortSysTickHandler>
  }
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003754:	2100      	movs	r1, #0
 8003756:	f06f 0004 	mvn.w	r0, #4
 800375a:	f7ff ffbf 	bl	80036dc <__NVIC_SetPriority>
#endif
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800376a:	f3ef 8305 	mrs	r3, IPSR
 800376e:	603b      	str	r3, [r7, #0]
  return(result);
 8003770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003776:	f06f 0305 	mvn.w	r3, #5
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	e00c      	b.n	8003798 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <osKernelInitialize+0x44>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <osKernelInitialize+0x44>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800378c:	2300      	movs	r3, #0
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	e002      	b.n	8003798 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	2000026c 	.word	0x2000026c

080037ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b2:	f3ef 8305 	mrs	r3, IPSR
 80037b6:	603b      	str	r3, [r7, #0]
  return(result);
 80037b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037be:	f06f 0305 	mvn.w	r3, #5
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	e010      	b.n	80037e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <osKernelStart+0x48>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d109      	bne.n	80037e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ce:	f7ff ffbf 	bl	8003750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <osKernelStart+0x48>)
 80037d4:	2202      	movs	r2, #2
 80037d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037d8:	f001 fca6 	bl	8005128 <vTaskStartScheduler>
      stat = osOK;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	e002      	b.n	80037e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037e8:	687b      	ldr	r3, [r7, #4]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000026c 	.word	0x2000026c

080037f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	; 0x38
 80037fc:	af04      	add	r7, sp, #16
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003808:	f3ef 8305 	mrs	r3, IPSR
 800380c:	617b      	str	r3, [r7, #20]
  return(result);
 800380e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003810:	2b00      	cmp	r3, #0
 8003812:	d17e      	bne.n	8003912 <osThreadNew+0x11a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d07b      	beq.n	8003912 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800381e:	2318      	movs	r3, #24
 8003820:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d045      	beq.n	80038be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <osThreadNew+0x48>
        name = attr->name;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <osThreadNew+0x6e>
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b38      	cmp	r3, #56	; 0x38
 8003858:	d805      	bhi.n	8003866 <osThreadNew+0x6e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <osThreadNew+0x72>
        return (NULL);
 8003866:	2300      	movs	r3, #0
 8003868:	e054      	b.n	8003914 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <osThreadNew+0xa8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b5b      	cmp	r3, #91	; 0x5b
 8003888:	d90a      	bls.n	80038a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <osThreadNew+0xa8>
        mem = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	e010      	b.n	80038c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10c      	bne.n	80038c2 <osThreadNew+0xca>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <osThreadNew+0xca>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <osThreadNew+0xca>
          mem = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e001      	b.n	80038c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d110      	bne.n	80038ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038d0:	9202      	str	r2, [sp, #8]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f001 fa4c 	bl	8004d7c <xTaskCreateStatic>
 80038e4:	4603      	mov	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e013      	b.n	8003912 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f001 fa97 	bl	8004e36 <xTaskCreate>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <osThreadNew+0x11a>
            hTask = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003912:	693b      	ldr	r3, [r7, #16]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003924:	f3ef 8305 	mrs	r3, IPSR
 8003928:	60bb      	str	r3, [r7, #8]
  return(result);
 800392a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <osDelay+0x1c>
    stat = osErrorISR;
 8003930:	f06f 0305 	mvn.w	r3, #5
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e007      	b.n	8003948 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 fbbc 	bl	80050c0 <vTaskDelay>
    }
  }

  return (stat);
 8003948:	68fb      	ldr	r3, [r7, #12]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003952:	b580      	push	{r7, lr}
 8003954:	b08a      	sub	sp, #40	; 0x28
 8003956:	af02      	add	r7, sp, #8
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003962:	f3ef 8305 	mrs	r3, IPSR
 8003966:	613b      	str	r3, [r7, #16]
  return(result);
 8003968:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800396a:	2b00      	cmp	r3, #0
 800396c:	d175      	bne.n	8003a5a <osSemaphoreNew+0x108>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d072      	beq.n	8003a5a <osSemaphoreNew+0x108>
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d86e      	bhi.n	8003a5a <osSemaphoreNew+0x108>
    mem = -1;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <osSemaphoreNew+0x4c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b4f      	cmp	r3, #79	; 0x4f
 8003996:	d902      	bls.n	800399e <osSemaphoreNew+0x4c>
        mem = 1;
 8003998:	2301      	movs	r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e00c      	b.n	80039b8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <osSemaphoreNew+0x66>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <osSemaphoreNew+0x66>
          mem = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e001      	b.n	80039b8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d04c      	beq.n	8003a5a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d128      	bne.n	8003a18 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10a      	bne.n	80039e2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2203      	movs	r2, #3
 80039d2:	9200      	str	r2, [sp, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2001      	movs	r0, #1
 80039da:	f000 fa29 	bl	8003e30 <xQueueGenericCreateStatic>
 80039de:	61f8      	str	r0, [r7, #28]
 80039e0:	e005      	b.n	80039ee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80039e2:	2203      	movs	r2, #3
 80039e4:	2100      	movs	r1, #0
 80039e6:	2001      	movs	r0, #1
 80039e8:	f000 fa9a 	bl	8003f20 <xQueueGenericCreate>
 80039ec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d022      	beq.n	8003a3a <osSemaphoreNew+0xe8>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01f      	beq.n	8003a3a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80039fa:	2300      	movs	r3, #0
 80039fc:	2200      	movs	r2, #0
 80039fe:	2100      	movs	r1, #0
 8003a00:	69f8      	ldr	r0, [r7, #28]
 8003a02:	f000 fb55 	bl	80040b0 <xQueueGenericSend>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d016      	beq.n	8003a3a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003a0c:	69f8      	ldr	r0, [r7, #28]
 8003a0e:	f000 ffe1 	bl	80049d4 <vQueueDelete>
            hSemaphore = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e010      	b.n	8003a3a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d108      	bne.n	8003a30 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fad7 	bl	8003fda <xQueueCreateCountingSemaphoreStatic>
 8003a2c:	61f8      	str	r0, [r7, #28]
 8003a2e:	e004      	b.n	8003a3a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fb08 	bl	8004048 <xQueueCreateCountingSemaphore>
 8003a38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e001      	b.n	8003a52 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003a52:	6979      	ldr	r1, [r7, #20]
 8003a54:	69f8      	ldr	r0, [r7, #28]
 8003a56:	f001 f909 	bl	8004c6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003a7c:	f06f 0303 	mvn.w	r3, #3
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e039      	b.n	8003af8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a84:	f3ef 8305 	mrs	r3, IPSR
 8003a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003a96:	f06f 0303 	mvn.w	r3, #3
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e02c      	b.n	8003af8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	6938      	ldr	r0, [r7, #16]
 8003aac:	f000 ff12 	bl	80048d4 <xQueueReceiveFromISR>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d003      	beq.n	8003abe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003ab6:	f06f 0302 	mvn.w	r3, #2
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e01c      	b.n	8003af8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d019      	beq.n	8003af8 <osSemaphoreAcquire+0x94>
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <osSemaphoreAcquire+0xa0>)
 8003ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	e010      	b.n	8003af8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	6938      	ldr	r0, [r7, #16]
 8003ada:	f000 fdef 	bl	80046bc <xQueueSemaphoreTake>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d009      	beq.n	8003af8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003aea:	f06f 0301 	mvn.w	r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e002      	b.n	8003af8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003af2:	f06f 0302 	mvn.w	r3, #2
 8003af6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003b1e:	f06f 0303 	mvn.w	r3, #3
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e02c      	b.n	8003b80 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b26:	f3ef 8305 	mrs	r3, IPSR
 8003b2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01a      	beq.n	8003b68 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6938      	ldr	r0, [r7, #16]
 8003b3e:	f000 fc50 	bl	80043e2 <xQueueGiveFromISR>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d003      	beq.n	8003b50 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003b48:	f06f 0302 	mvn.w	r3, #2
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e017      	b.n	8003b80 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d014      	beq.n	8003b80 <osSemaphoreRelease+0x78>
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <osSemaphoreRelease+0x84>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	e00b      	b.n	8003b80 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6938      	ldr	r0, [r7, #16]
 8003b70:	f000 fa9e 	bl	80040b0 <xQueueGenericSend>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d002      	beq.n	8003b80 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003b7a:	f06f 0302 	mvn.w	r3, #2
 8003b7e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003b80:	697b      	ldr	r3, [r7, #20]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000270 	.word	0x20000270
 8003bc0:	200002cc 	.word	0x200002cc

08003bc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <vApplicationGetTimerTaskMemory+0x30>)
 8003bda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	200004cc 	.word	0x200004cc
 8003bf4:	20000528 	.word	0x20000528

08003bf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f103 0208 	add.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 0208 	add.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d103      	bne.n	8003cba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e00c      	b.n	8003cd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e002      	b.n	8003cc8 <vListInsert+0x2e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d2f6      	bcs.n	8003cc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6892      	ldr	r2, [r2, #8]
 8003d22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6852      	ldr	r2, [r2, #4]
 8003d2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d103      	bne.n	8003d40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d8a:	f002 fc73 	bl	8006674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	441a      	add	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	; 0xff
 8003dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d114      	bne.n	8003e0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01a      	beq.n	8003e1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3310      	adds	r3, #16
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fc25 	bl	800563c <xTaskRemoveFromEventList>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <xQueueGenericReset+0xcc>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	e009      	b.n	8003e1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3310      	adds	r3, #16
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fef2 	bl	8003bf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff feed 	bl	8003bf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e1e:	f002 fc59 	bl	80066d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e22:	2301      	movs	r3, #1
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	; 0x38
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <xQueueGenericCreateStatic+0x52>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <xQueueGenericCreateStatic+0x56>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueGenericCreateStatic+0x58>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	623b      	str	r3, [r7, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xQueueGenericCreateStatic+0x7e>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericCreateStatic+0x82>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericCreateStatic+0x84>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61fb      	str	r3, [r7, #28]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ece:	2350      	movs	r3, #80	; 0x50
 8003ed0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b50      	cmp	r3, #80	; 0x50
 8003ed6:	d00a      	beq.n	8003eee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	61bb      	str	r3, [r7, #24]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003eee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f83f 	bl	8003f94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3350      	adds	r3, #80	; 0x50
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 fcad 	bl	80068b8 <pvPortMalloc>
 8003f5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3350      	adds	r3, #80	; 0x50
 8003f6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f78:	79fa      	ldrb	r2, [r7, #7]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f805 	bl	8003f94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e002      	b.n	8003fb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	69b8      	ldr	r0, [r7, #24]
 8003fc6:	f7ff fecb 	bl	8003d60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08a      	sub	sp, #40	; 0x28
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	61bb      	str	r3, [r7, #24]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90a      	bls.n	8004020 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	617b      	str	r3, [r7, #20]
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004020:	2302      	movs	r3, #2
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	2100      	movs	r1, #0
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff ff00 	bl	8003e30 <xQueueGenericCreateStatic>
 8004030:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800403e:	69fb      	ldr	r3, [r7, #28]
	}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	613b      	str	r3, [r7, #16]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d90a      	bls.n	800408c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60fb      	str	r3, [r7, #12]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800408c:	2202      	movs	r2, #2
 800408e:	2100      	movs	r1, #0
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff45 	bl	8003f20 <xQueueGenericCreate>
 8004096:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80040a4:	697b      	ldr	r3, [r7, #20]
	}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08e      	sub	sp, #56	; 0x38
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xQueueGenericSend+0x32>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <xQueueGenericSend+0x40>
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueGenericSend+0x44>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <xQueueGenericSend+0x46>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <xQueueGenericSend+0x60>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d103      	bne.n	800411e <xQueueGenericSend+0x6e>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <xQueueGenericSend+0x72>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <xQueueGenericSend+0x74>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xQueueGenericSend+0x8e>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	623b      	str	r3, [r7, #32]
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800413e:	f001 fc3d 	bl	80059bc <xTaskGetSchedulerState>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <xQueueGenericSend+0x9e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <xQueueGenericSend+0xa2>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <xQueueGenericSend+0xa4>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericSend+0xbe>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	61fb      	str	r3, [r7, #28]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800416e:	f002 fa81 	bl	8006674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <xQueueGenericSend+0xd4>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d129      	bne.n	80041d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800418a:	f000 fc5e 	bl	8004a4a <prvCopyDataToQueue>
 800418e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	3324      	adds	r3, #36	; 0x24
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fa4d 	bl	800563c <xTaskRemoveFromEventList>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <xQueueGenericSend+0x1f8>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	e00a      	b.n	80041d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <xQueueGenericSend+0x1f8>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041d0:	f002 fa80 	bl	80066d4 <vPortExitCritical>
				return pdPASS;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e063      	b.n	80042a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041de:	f002 fa79 	bl	80066d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e05c      	b.n	80042a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fa87 	bl	8005704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041fa:	f002 fa6b 	bl	80066d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041fe:	f000 fff9 	bl	80051f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004202:	f002 fa37 	bl	8006674 <vPortEnterCritical>
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420c:	b25b      	sxtb	r3, r3
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d103      	bne.n	800421c <xQueueGenericSend+0x16c>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004222:	b25b      	sxtb	r3, r3
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d103      	bne.n	8004232 <xQueueGenericSend+0x182>
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004232:	f002 fa4f 	bl	80066d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004236:	1d3a      	adds	r2, r7, #4
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fa76 	bl	8005730 <xTaskCheckForTimeOut>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d124      	bne.n	8004294 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800424a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800424c:	f000 fcf5 	bl	8004c3a <prvIsQueueFull>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	3310      	adds	r3, #16
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f99c 	bl	800559c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004266:	f000 fc80 	bl	8004b6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800426a:	f000 ffd1 	bl	8005210 <xTaskResumeAll>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f af7c 	bne.w	800416e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <xQueueGenericSend+0x1f8>)
 8004278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	e772      	b.n	800416e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800428a:	f000 fc6e 	bl	8004b6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800428e:	f000 ffbf 	bl	8005210 <xTaskResumeAll>
 8004292:	e76c      	b.n	800416e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004296:	f000 fc68 	bl	8004b6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800429a:	f000 ffb9 	bl	8005210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800429e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3738      	adds	r7, #56	; 0x38
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b090      	sub	sp, #64	; 0x40
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <xQueueGenericSendFromISR+0x3c>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <xQueueGenericSendFromISR+0x40>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <xQueueGenericSendFromISR+0x42>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d103      	bne.n	8004316 <xQueueGenericSendFromISR+0x6a>
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <xQueueGenericSendFromISR+0x6e>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <xQueueGenericSendFromISR+0x70>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	623b      	str	r3, [r7, #32]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004336:	f002 fa7f 	bl	8006838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800433a:	f3ef 8211 	mrs	r2, BASEPRI
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	61fa      	str	r2, [r7, #28]
 8004350:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004352:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <xQueueGenericSendFromISR+0xbc>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d12f      	bne.n	80043c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800437e:	f000 fb64 	bl	8004a4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004382:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d112      	bne.n	80043b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d016      	beq.n	80043c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	3324      	adds	r3, #36	; 0x24
 8004398:	4618      	mov	r0, r3
 800439a:	f001 f94f 	bl	800563c <xTaskRemoveFromEventList>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e007      	b.n	80043c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043b6:	3301      	adds	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	b25a      	sxtb	r2, r3
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043c2:	2301      	movs	r3, #1
 80043c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80043c6:	e001      	b.n	80043cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3740      	adds	r7, #64	; 0x40
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08e      	sub	sp, #56	; 0x38
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	623b      	str	r3, [r7, #32]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61fb      	str	r3, [r7, #28]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <xQueueGiveFromISR+0x58>
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <xQueueGiveFromISR+0x5c>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xQueueGiveFromISR+0x5e>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	61bb      	str	r3, [r7, #24]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800445a:	f002 f9ed 	bl	8006838 <vPortValidateInterruptPriority>
	__asm volatile
 800445e:	f3ef 8211 	mrs	r2, BASEPRI
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	617a      	str	r2, [r7, #20]
 8004474:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004476:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004486:	429a      	cmp	r2, r3
 8004488:	d22b      	bcs.n	80044e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800449c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d112      	bne.n	80044cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	3324      	adds	r3, #36	; 0x24
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 f8c2 	bl	800563c <xTaskRemoveFromEventList>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00e      	beq.n	80044dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e007      	b.n	80044dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d0:	3301      	adds	r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	b25a      	sxtb	r2, r3
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044dc:	2301      	movs	r3, #1
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
 80044e0:	e001      	b.n	80044e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f383 8811 	msr	BASEPRI, r3
}
 80044f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3738      	adds	r7, #56	; 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xQueueReceive+0x30>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	623b      	str	r3, [r7, #32]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <xQueueReceive+0x3e>
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <xQueueReceive+0x42>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <xQueueReceive+0x44>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueReceive+0x5e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61fb      	str	r3, [r7, #28]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800455a:	f001 fa2f 	bl	80059bc <xTaskGetSchedulerState>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xQueueReceive+0x6e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <xQueueReceive+0x72>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <xQueueReceive+0x74>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xQueueReceive+0x8e>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	61bb      	str	r3, [r7, #24]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800458a:	f002 f873 	bl	8006674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01f      	beq.n	80045da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800459e:	f000 fabe 	bl	8004b1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00f      	beq.n	80045d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	3310      	adds	r3, #16
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 f840 	bl	800563c <xTaskRemoveFromEventList>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045c2:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <xQueueReceive+0x1bc>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045d2:	f002 f87f 	bl	80066d4 <vPortExitCritical>
				return pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e069      	b.n	80046ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045e0:	f002 f878 	bl	80066d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e062      	b.n	80046ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045ee:	f107 0310 	add.w	r3, r7, #16
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 f886 	bl	8005704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045fc:	f002 f86a 	bl	80066d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004600:	f000 fdf8 	bl	80051f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004604:	f002 f836 	bl	8006674 <vPortEnterCritical>
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800460e:	b25b      	sxtb	r3, r3
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d103      	bne.n	800461e <xQueueReceive+0x122>
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004624:	b25b      	sxtb	r3, r3
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d103      	bne.n	8004634 <xQueueReceive+0x138>
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004634:	f002 f84e 	bl	80066d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004638:	1d3a      	adds	r2, r7, #4
 800463a:	f107 0310 	add.w	r3, r7, #16
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f875 	bl	8005730 <xTaskCheckForTimeOut>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d123      	bne.n	8004694 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800464c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464e:	f000 fade 	bl	8004c0e <prvIsQueueEmpty>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	3324      	adds	r3, #36	; 0x24
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 ff9b 	bl	800559c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004668:	f000 fa7f 	bl	8004b6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800466c:	f000 fdd0 	bl	8005210 <xTaskResumeAll>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d189      	bne.n	800458a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <xQueueReceive+0x1bc>)
 8004678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	e780      	b.n	800458a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800468a:	f000 fa6e 	bl	8004b6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800468e:	f000 fdbf 	bl	8005210 <xTaskResumeAll>
 8004692:	e77a      	b.n	800458a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004696:	f000 fa68 	bl	8004b6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800469a:	f000 fdb9 	bl	8005210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800469e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a0:	f000 fab5 	bl	8004c0e <prvIsQueueEmpty>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f43f af6f 	beq.w	800458a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	; 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08e      	sub	sp, #56	; 0x38
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	61fb      	str	r3, [r7, #28]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800470c:	f001 f956 	bl	80059bc <xTaskGetSchedulerState>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <xQueueSemaphoreTake+0x60>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <xQueueSemaphoreTake+0x64>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <xQueueSemaphoreTake+0x66>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	61bb      	str	r3, [r7, #24]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800473c:	f001 ff9a 	bl	8006674 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d024      	beq.n	8004796 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800475c:	f001 faa4 	bl	8005ca8 <pvTaskIncrementMutexHeldCount>
 8004760:	4602      	mov	r2, r0
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00f      	beq.n	800478e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	3310      	adds	r3, #16
 8004772:	4618      	mov	r0, r3
 8004774:	f000 ff62 	bl	800563c <xTaskRemoveFromEventList>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800477e:	4b54      	ldr	r3, [pc, #336]	; (80048d0 <xQueueSemaphoreTake+0x214>)
 8004780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800478e:	f001 ffa1 	bl	80066d4 <vPortExitCritical>
				return pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	e097      	b.n	80048c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	617b      	str	r3, [r7, #20]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047b8:	f001 ff8c 	bl	80066d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047bc:	2300      	movs	r3, #0
 80047be:	e082      	b.n	80048c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 ff9a 	bl	8005704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047d4:	f001 ff7e 	bl	80066d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047d8:	f000 fd0c 	bl	80051f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047dc:	f001 ff4a 	bl	8006674 <vPortEnterCritical>
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d103      	bne.n	80047f6 <xQueueSemaphoreTake+0x13a>
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d103      	bne.n	800480c <xQueueSemaphoreTake+0x150>
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800480c:	f001 ff62 	bl	80066d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004810:	463a      	mov	r2, r7
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 ff89 	bl	8005730 <xTaskCheckForTimeOut>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d132      	bne.n	800488a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004826:	f000 f9f2 	bl	8004c0e <prvIsQueueEmpty>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d026      	beq.n	800487e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004838:	f001 ff1c 	bl	8006674 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f8d9 	bl	80059f8 <xTaskPriorityInherit>
 8004846:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004848:	f001 ff44 	bl	80066d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fea1 	bl	800559c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800485a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800485c:	f000 f985 	bl	8004b6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004860:	f000 fcd6 	bl	8005210 <xTaskResumeAll>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f47f af68 	bne.w	800473c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <xQueueSemaphoreTake+0x214>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	e75e      	b.n	800473c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800487e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004880:	f000 f973 	bl	8004b6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004884:	f000 fcc4 	bl	8005210 <xTaskResumeAll>
 8004888:	e758      	b.n	800473c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800488a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800488c:	f000 f96d 	bl	8004b6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004890:	f000 fcbe 	bl	8005210 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004896:	f000 f9ba 	bl	8004c0e <prvIsQueueEmpty>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f43f af4d 	beq.w	800473c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80048a8:	f001 fee4 	bl	8006674 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048ae:	f000 f8b4 	bl	8004a1a <prvGetDisinheritPriorityAfterTimeout>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 f972 	bl	8005ba4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048c0:	f001 ff08 	bl	80066d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3738      	adds	r7, #56	; 0x38
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	; 0x38
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	623b      	str	r3, [r7, #32]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <xQueueReceiveFromISR+0x3a>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <xQueueReceiveFromISR+0x3e>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueReceiveFromISR+0x40>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61fb      	str	r3, [r7, #28]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800492e:	f001 ff83 	bl	8006838 <vPortValidateInterruptPriority>
	__asm volatile
 8004932:	f3ef 8211 	mrs	r2, BASEPRI
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61ba      	str	r2, [r7, #24]
 8004948:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800494a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d02f      	beq.n	80049ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004968:	f000 f8d9 	bl	8004b1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d112      	bne.n	80049a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	3310      	adds	r3, #16
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fe56 	bl	800563c <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00e      	beq.n	80049b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e007      	b.n	80049b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049a8:	3301      	adds	r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	b25a      	sxtb	r2, r3
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80049b4:	2301      	movs	r3, #1
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	e001      	b.n	80049be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f383 8811 	msr	BASEPRI, r3
}
 80049c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3738      	adds	r7, #56	; 0x38
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <vQueueDelete+0x28>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60bb      	str	r3, [r7, #8]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f95f 	bl	8004cc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f002 f81f 	bl	8006a50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e001      	b.n	8004a3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
	}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d14d      	bne.n	8004b0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 f827 	bl	8005ac8 <xTaskPriorityDisinherit>
 8004a7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	e043      	b.n	8004b0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d119      	bne.n	8004abe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6858      	ldr	r0, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	461a      	mov	r2, r3
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	f002 f94d 	bl	8006d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d32b      	bcc.n	8004b0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	e026      	b.n	8004b0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68d8      	ldr	r0, [r3, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	f002 f933 	bl	8006d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	425b      	negs	r3, r3
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d207      	bcs.n	8004afa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	425b      	negs	r3, r3
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d105      	bne.n	8004b0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b14:	697b      	ldr	r3, [r7, #20]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d303      	bcc.n	8004b52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68d9      	ldr	r1, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6838      	ldr	r0, [r7, #0]
 8004b5e:	f002 f8e9 	bl	8006d34 <memcpy>
	}
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b72:	f001 fd7f 	bl	8006674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b7e:	e011      	b.n	8004ba4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d012      	beq.n	8004bae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3324      	adds	r3, #36	; 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fd55 	bl	800563c <xTaskRemoveFromEventList>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b98:	f000 fe2c 	bl	80057f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	dce9      	bgt.n	8004b80 <prvUnlockQueue+0x16>
 8004bac:	e000      	b.n	8004bb0 <prvUnlockQueue+0x46>
					break;
 8004bae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	22ff      	movs	r2, #255	; 0xff
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bb8:	f001 fd8c 	bl	80066d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bbc:	f001 fd5a 	bl	8006674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bc8:	e011      	b.n	8004bee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d012      	beq.n	8004bf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3310      	adds	r3, #16
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fd30 	bl	800563c <xTaskRemoveFromEventList>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004be2:	f000 fe07 	bl	80057f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dce9      	bgt.n	8004bca <prvUnlockQueue+0x60>
 8004bf6:	e000      	b.n	8004bfa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c02:	f001 fd67 	bl	80066d4 <vPortExitCritical>
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c16:	f001 fd2d 	bl	8006674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e001      	b.n	8004c2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c2c:	f001 fd52 	bl	80066d4 <vPortExitCritical>

	return xReturn;
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c42:	f001 fd17 	bl	8006674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d102      	bne.n	8004c58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e001      	b.n	8004c5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c5c:	f001 fd3a 	bl	80066d4 <vPortExitCritical>

	return xReturn;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e014      	b.n	8004ca6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c7c:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <vQueueAddToRegistry+0x50>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c88:	490c      	ldr	r1, [pc, #48]	; (8004cbc <vQueueAddToRegistry+0x50>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <vQueueAddToRegistry+0x50>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c9e:	e006      	b.n	8004cae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b07      	cmp	r3, #7
 8004caa:	d9e7      	bls.n	8004c7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000928 	.word	0x20000928

08004cc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e016      	b.n	8004cfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004cce:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <vQueueUnregisterQueue+0x50>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d10b      	bne.n	8004cf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <vQueueUnregisterQueue+0x50>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <vQueueUnregisterQueue+0x50>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]
				break;
 8004cf4:	e006      	b.n	8004d04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b07      	cmp	r3, #7
 8004d00:	d9e5      	bls.n	8004cce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000928 	.word	0x20000928

08004d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d24:	f001 fca6 	bl	8006674 <vPortEnterCritical>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d103      	bne.n	8004d3e <vQueueWaitForMessageRestricted+0x2a>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d103      	bne.n	8004d54 <vQueueWaitForMessageRestricted+0x40>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d54:	f001 fcbe 	bl	80066d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fc3b 	bl	80055e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7ff fefb 	bl	8004b6a <prvUnlockQueue>
	}
 8004d74:	bf00      	nop
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af04      	add	r7, sp, #16
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	623b      	str	r3, [r7, #32]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61fb      	str	r3, [r7, #28]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dc2:	235c      	movs	r3, #92	; 0x5c
 8004dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8004dca:	d00a      	beq.n	8004de2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	61bb      	str	r3, [r7, #24]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004de2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01e      	beq.n	8004e28 <xTaskCreateStatic+0xac>
 8004dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e02:	2300      	movs	r3, #0
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	f107 0314 	add.w	r3, r7, #20
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f850 	bl	8004ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e22:	f000 f8dd 	bl	8004fe0 <prvAddNewTaskToReadyList>
 8004e26:	e001      	b.n	8004e2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e2c:	697b      	ldr	r3, [r7, #20]
	}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3728      	adds	r7, #40	; 0x28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b08c      	sub	sp, #48	; 0x30
 8004e3a:	af04      	add	r7, sp, #16
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 fd34 	bl	80068b8 <pvPortMalloc>
 8004e50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e58:	205c      	movs	r0, #92	; 0x5c
 8004e5a:	f001 fd2d 	bl	80068b8 <pvPortMalloc>
 8004e5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e6c:	e005      	b.n	8004e7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e6e:	6978      	ldr	r0, [r7, #20]
 8004e70:	f001 fdee 	bl	8006a50 <vPortFree>
 8004e74:	e001      	b.n	8004e7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d017      	beq.n	8004eb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e88:	88fa      	ldrh	r2, [r7, #6]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9303      	str	r3, [sp, #12]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f80e 	bl	8004ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ea4:	69f8      	ldr	r0, [r7, #28]
 8004ea6:	f000 f89b 	bl	8004fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	e002      	b.n	8004eb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	21a5      	movs	r1, #165	; 0xa5
 8004eda:	f001 fef7 	bl	8006ccc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f023 0307 	bic.w	r3, r3, #7
 8004ef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	617b      	str	r3, [r7, #20]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01f      	beq.n	8004f5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e012      	b.n	8004f4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	7819      	ldrb	r1, [r3, #0]
 8004f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	3334      	adds	r3, #52	; 0x34
 8004f34:	460a      	mov	r2, r1
 8004f36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b0f      	cmp	r3, #15
 8004f4e:	d9e9      	bls.n	8004f24 <prvInitialiseNewTask+0x64>
 8004f50:	e000      	b.n	8004f54 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f5c:	e003      	b.n	8004f66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b37      	cmp	r3, #55	; 0x37
 8004f6a:	d901      	bls.n	8004f70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f6c:	2337      	movs	r3, #55	; 0x37
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	3304      	adds	r3, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fe56 	bl	8003c38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	3318      	adds	r3, #24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe fe51 	bl	8003c38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	2200      	movs	r2, #0
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	68f9      	ldr	r1, [r7, #12]
 8004fbe:	69b8      	ldr	r0, [r7, #24]
 8004fc0:	f001 fa28 	bl	8006414 <pxPortInitialiseStack>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fe8:	f001 fb44 	bl	8006674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <prvAddNewTaskToReadyList+0xc4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <prvAddNewTaskToReadyList+0xc4>)
 8004ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <prvAddNewTaskToReadyList+0xc8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ffe:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <prvAddNewTaskToReadyList+0xc8>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005004:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <prvAddNewTaskToReadyList+0xc4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d110      	bne.n	800502e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800500c:	f000 fc18 	bl	8005840 <prvInitialiseTaskLists>
 8005010:	e00d      	b.n	800502e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005012:	4b26      	ldr	r3, [pc, #152]	; (80050ac <prvAddNewTaskToReadyList+0xcc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <prvAddNewTaskToReadyList+0xc8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	429a      	cmp	r2, r3
 8005026:	d802      	bhi.n	800502e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <prvAddNewTaskToReadyList+0xc8>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800502e:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <prvAddNewTaskToReadyList+0xd0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	4a1e      	ldr	r2, [pc, #120]	; (80050b0 <prvAddNewTaskToReadyList+0xd0>)
 8005036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <prvAddNewTaskToReadyList+0xd0>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <prvAddNewTaskToReadyList+0xd4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d903      	bls.n	8005054 <prvAddNewTaskToReadyList+0x74>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <prvAddNewTaskToReadyList+0xd4>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <prvAddNewTaskToReadyList+0xd8>)
 8005062:	441a      	add	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7fe fdf1 	bl	8003c52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005070:	f001 fb30 	bl	80066d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <prvAddNewTaskToReadyList+0xcc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00e      	beq.n	800509a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <prvAddNewTaskToReadyList+0xc8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	429a      	cmp	r2, r3
 8005088:	d207      	bcs.n	800509a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <prvAddNewTaskToReadyList+0xdc>)
 800508c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000e3c 	.word	0x20000e3c
 80050a8:	20000968 	.word	0x20000968
 80050ac:	20000e48 	.word	0x20000e48
 80050b0:	20000e58 	.word	0x20000e58
 80050b4:	20000e44 	.word	0x20000e44
 80050b8:	2000096c 	.word	0x2000096c
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <vTaskDelay+0x60>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <vTaskDelay+0x30>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	60bb      	str	r3, [r7, #8]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050f0:	f000 f880 	bl	80051f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050f4:	2100      	movs	r1, #0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fdea 	bl	8005cd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050fc:	f000 f888 	bl	8005210 <xTaskResumeAll>
 8005100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <vTaskDelay+0x64>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000e64 	.word	0x20000e64
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005136:	463a      	mov	r2, r7
 8005138:	1d39      	adds	r1, r7, #4
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fd26 	bl	8003b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	9202      	str	r2, [sp, #8]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	2300      	movs	r3, #0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	460a      	mov	r2, r1
 8005156:	4921      	ldr	r1, [pc, #132]	; (80051dc <vTaskStartScheduler+0xb4>)
 8005158:	4821      	ldr	r0, [pc, #132]	; (80051e0 <vTaskStartScheduler+0xb8>)
 800515a:	f7ff fe0f 	bl	8004d7c <xTaskCreateStatic>
 800515e:	4603      	mov	r3, r0
 8005160:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <vTaskStartScheduler+0xbc>)
 8005162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005164:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <vTaskStartScheduler+0xbc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800516c:	2301      	movs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e001      	b.n	8005176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d102      	bne.n	8005182 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800517c:	f000 fdfc 	bl	8005d78 <xTimerCreateTimerTask>
 8005180:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d116      	bne.n	80051b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	613b      	str	r3, [r7, #16]
}
 800519a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800519c:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <vTaskStartScheduler+0xc0>)
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <vTaskStartScheduler+0xc4>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <vTaskStartScheduler+0xc8>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051b0:	f001 f9be 	bl	8006530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051b4:	e00e      	b.n	80051d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d10a      	bne.n	80051d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60fb      	str	r3, [r7, #12]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <vTaskStartScheduler+0xaa>
}
 80051d4:	bf00      	nop
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	08007874 	.word	0x08007874
 80051e0:	0800580d 	.word	0x0800580d
 80051e4:	20000e60 	.word	0x20000e60
 80051e8:	20000e5c 	.word	0x20000e5c
 80051ec:	20000e48 	.word	0x20000e48
 80051f0:	20000e40 	.word	0x20000e40

080051f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <vTaskSuspendAll+0x18>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	4a03      	ldr	r2, [pc, #12]	; (800520c <vTaskSuspendAll+0x18>)
 8005200:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005202:	bf00      	nop
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000e64 	.word	0x20000e64

08005210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <xTaskResumeAll+0x118>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <xTaskResumeAll+0x2c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	603b      	str	r3, [r7, #0]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800523c:	f001 fa1a 	bl	8006674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <xTaskResumeAll+0x118>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	4a38      	ldr	r2, [pc, #224]	; (8005328 <xTaskResumeAll+0x118>)
 8005248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524a:	4b37      	ldr	r3, [pc, #220]	; (8005328 <xTaskResumeAll+0x118>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d162      	bne.n	8005318 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005252:	4b36      	ldr	r3, [pc, #216]	; (800532c <xTaskResumeAll+0x11c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d05e      	beq.n	8005318 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525a:	e02f      	b.n	80052bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <xTaskResumeAll+0x120>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3318      	adds	r3, #24
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fd4f 	bl	8003d0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3304      	adds	r3, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe fd4a 	bl	8003d0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <xTaskResumeAll+0x124>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d903      	bls.n	800528c <xTaskResumeAll+0x7c>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <xTaskResumeAll+0x124>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <xTaskResumeAll+0x128>)
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe fcd5 	bl	8003c52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <xTaskResumeAll+0x12c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <xTaskResumeAll+0x130>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <xTaskResumeAll+0x120>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1cb      	bne.n	800525c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ca:	f000 fb57 	bl	800597c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <xTaskResumeAll+0x134>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052da:	f000 f847 	bl	800536c <xTaskIncrementTick>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <xTaskResumeAll+0x130>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f1      	bne.n	80052da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052f6:	4b13      	ldr	r3, [pc, #76]	; (8005344 <xTaskResumeAll+0x134>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xTaskResumeAll+0x130>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <xTaskResumeAll+0x138>)
 800530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005318:	f001 f9dc 	bl	80066d4 <vPortExitCritical>

	return xAlreadyYielded;
 800531c:	68bb      	ldr	r3, [r7, #8]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000e64 	.word	0x20000e64
 800532c:	20000e3c 	.word	0x20000e3c
 8005330:	20000dfc 	.word	0x20000dfc
 8005334:	20000e44 	.word	0x20000e44
 8005338:	2000096c 	.word	0x2000096c
 800533c:	20000968 	.word	0x20000968
 8005340:	20000e50 	.word	0x20000e50
 8005344:	20000e4c 	.word	0x20000e4c
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <xTaskGetTickCount+0x1c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005358:	687b      	ldr	r3, [r7, #4]
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000e40 	.word	0x20000e40

0800536c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005376:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <xTaskIncrementTick+0x148>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 808f 	bne.w	800549e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005380:	4b4d      	ldr	r3, [pc, #308]	; (80054b8 <xTaskIncrementTick+0x14c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005388:	4a4b      	ldr	r2, [pc, #300]	; (80054b8 <xTaskIncrementTick+0x14c>)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d120      	bne.n	80053d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005394:	4b49      	ldr	r3, [pc, #292]	; (80054bc <xTaskIncrementTick+0x150>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	603b      	str	r3, [r7, #0]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <xTaskIncrementTick+0x46>
 80053b4:	4b41      	ldr	r3, [pc, #260]	; (80054bc <xTaskIncrementTick+0x150>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <xTaskIncrementTick+0x154>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a3f      	ldr	r2, [pc, #252]	; (80054bc <xTaskIncrementTick+0x150>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <xTaskIncrementTick+0x154>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <xTaskIncrementTick+0x158>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a3d      	ldr	r2, [pc, #244]	; (80054c4 <xTaskIncrementTick+0x158>)
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	f000 fad3 	bl	800597c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053d6:	4b3c      	ldr	r3, [pc, #240]	; (80054c8 <xTaskIncrementTick+0x15c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d349      	bcc.n	8005474 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e0:	4b36      	ldr	r3, [pc, #216]	; (80054bc <xTaskIncrementTick+0x150>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ea:	4b37      	ldr	r3, [pc, #220]	; (80054c8 <xTaskIncrementTick+0x15c>)
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295
 80053f0:	601a      	str	r2, [r3, #0]
					break;
 80053f2:	e03f      	b.n	8005474 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <xTaskIncrementTick+0x150>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d203      	bcs.n	8005414 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800540c:	4a2e      	ldr	r2, [pc, #184]	; (80054c8 <xTaskIncrementTick+0x15c>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005412:	e02f      	b.n	8005474 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	3304      	adds	r3, #4
 8005418:	4618      	mov	r0, r3
 800541a:	f7fe fc77 	bl	8003d0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3318      	adds	r3, #24
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fc6e 	bl	8003d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <xTaskIncrementTick+0x160>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d903      	bls.n	8005444 <xTaskIncrementTick+0xd8>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <xTaskIncrementTick+0x160>)
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <xTaskIncrementTick+0x164>)
 8005452:	441a      	add	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7fe fbf9 	bl	8003c52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <xTaskIncrementTick+0x168>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	429a      	cmp	r2, r3
 800546c:	d3b8      	bcc.n	80053e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005472:	e7b5      	b.n	80053e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <xTaskIncrementTick+0x168>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	4915      	ldr	r1, [pc, #84]	; (80054d0 <xTaskIncrementTick+0x164>)
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d901      	bls.n	8005490 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <xTaskIncrementTick+0x16c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e004      	b.n	80054a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800549e:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <xTaskIncrementTick+0x170>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	4a0d      	ldr	r2, [pc, #52]	; (80054dc <xTaskIncrementTick+0x170>)
 80054a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054a8:	697b      	ldr	r3, [r7, #20]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000e64 	.word	0x20000e64
 80054b8:	20000e40 	.word	0x20000e40
 80054bc:	20000df4 	.word	0x20000df4
 80054c0:	20000df8 	.word	0x20000df8
 80054c4:	20000e54 	.word	0x20000e54
 80054c8:	20000e5c 	.word	0x20000e5c
 80054cc:	20000e44 	.word	0x20000e44
 80054d0:	2000096c 	.word	0x2000096c
 80054d4:	20000968 	.word	0x20000968
 80054d8:	20000e50 	.word	0x20000e50
 80054dc:	20000e4c 	.word	0x20000e4c

080054e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054e6:	4b28      	ldr	r3, [pc, #160]	; (8005588 <vTaskSwitchContext+0xa8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <vTaskSwitchContext+0xac>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054f4:	e041      	b.n	800557a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80054f6:	4b25      	ldr	r3, [pc, #148]	; (800558c <vTaskSwitchContext+0xac>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054fc:	4b24      	ldr	r3, [pc, #144]	; (8005590 <vTaskSwitchContext+0xb0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e010      	b.n	8005526 <vTaskSwitchContext+0x46>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <vTaskSwitchContext+0x40>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	607b      	str	r3, [r7, #4]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <vTaskSwitchContext+0x3e>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3b01      	subs	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	491b      	ldr	r1, [pc, #108]	; (8005594 <vTaskSwitchContext+0xb4>)
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0e4      	beq.n	8005504 <vTaskSwitchContext+0x24>
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <vTaskSwitchContext+0xb4>)
 8005546:	4413      	add	r3, r2
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3308      	adds	r3, #8
 800555c:	429a      	cmp	r2, r3
 800555e:	d104      	bne.n	800556a <vTaskSwitchContext+0x8a>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4a09      	ldr	r2, [pc, #36]	; (8005598 <vTaskSwitchContext+0xb8>)
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <vTaskSwitchContext+0xb0>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000e64 	.word	0x20000e64
 800558c:	20000e50 	.word	0x20000e50
 8005590:	20000e44 	.word	0x20000e44
 8005594:	2000096c 	.word	0x2000096c
 8005598:	20000968 	.word	0x20000968

0800559c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <vTaskPlaceOnEventList+0x44>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3318      	adds	r3, #24
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fe fb65 	bl	8003c9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055d0:	2101      	movs	r1, #1
 80055d2:	6838      	ldr	r0, [r7, #0]
 80055d4:	f000 fb7c 	bl	8005cd0 <prvAddCurrentTaskToDelayedList>
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000968 	.word	0x20000968

080055e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	617b      	str	r3, [r7, #20]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <vTaskPlaceOnEventListRestricted+0x54>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3318      	adds	r3, #24
 8005612:	4619      	mov	r1, r3
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7fe fb1c 	bl	8003c52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005620:	f04f 33ff 	mov.w	r3, #4294967295
 8005624:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	68b8      	ldr	r0, [r7, #8]
 800562a:	f000 fb51 	bl	8005cd0 <prvAddCurrentTaskToDelayedList>
	}
 800562e:	bf00      	nop
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000968 	.word	0x20000968

0800563c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	3318      	adds	r3, #24
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fb4d 	bl	8003d0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005672:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <xTaskRemoveFromEventList+0xb0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11d      	bne.n	80056b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3304      	adds	r3, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fb44 	bl	8003d0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <xTaskRemoveFromEventList+0xb4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d903      	bls.n	8005698 <xTaskRemoveFromEventList+0x5c>
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <xTaskRemoveFromEventList+0xb4>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <xTaskRemoveFromEventList+0xb8>)
 80056a6:	441a      	add	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f7fe facf 	bl	8003c52 <vListInsertEnd>
 80056b4:	e005      	b.n	80056c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	3318      	adds	r3, #24
 80056ba:	4619      	mov	r1, r3
 80056bc:	480e      	ldr	r0, [pc, #56]	; (80056f8 <xTaskRemoveFromEventList+0xbc>)
 80056be:	f7fe fac8 	bl	8003c52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <xTaskRemoveFromEventList+0xc0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d905      	bls.n	80056dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <xTaskRemoveFromEventList+0xc4>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e001      	b.n	80056e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056e0:	697b      	ldr	r3, [r7, #20]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000e64 	.word	0x20000e64
 80056f0:	20000e44 	.word	0x20000e44
 80056f4:	2000096c 	.word	0x2000096c
 80056f8:	20000dfc 	.word	0x20000dfc
 80056fc:	20000968 	.word	0x20000968
 8005700:	20000e50 	.word	0x20000e50

08005704 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <vTaskInternalSetTimeOutState+0x24>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <vTaskInternalSetTimeOutState+0x28>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	605a      	str	r2, [r3, #4]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000e54 	.word	0x20000e54
 800572c:	20000e40 	.word	0x20000e40

08005730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	613b      	str	r3, [r7, #16]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60fb      	str	r3, [r7, #12]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005772:	f000 ff7f 	bl	8006674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005776:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <xTaskCheckForTimeOut+0xbc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d102      	bne.n	8005796 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	e023      	b.n	80057de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <xTaskCheckForTimeOut+0xc0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d007      	beq.n	80057b2 <xTaskCheckForTimeOut+0x82>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d302      	bcc.n	80057b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e015      	b.n	80057de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d20b      	bcs.n	80057d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff9b 	bl	8005704 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	e004      	b.n	80057de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057de:	f000 ff79 	bl	80066d4 <vPortExitCritical>

	return xReturn;
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000e40 	.word	0x20000e40
 80057f0:	20000e54 	.word	0x20000e54

080057f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <vTaskMissedYield+0x14>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
}
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000e50 	.word	0x20000e50

0800580c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005814:	f000 f854 	bl	80058c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <prvIdleTask+0x2c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d907      	bls.n	8005830 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <prvIdleTask+0x30>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005830:	f7fb fa8c 	bl	8000d4c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005834:	e7ee      	b.n	8005814 <prvIdleTask+0x8>
 8005836:	bf00      	nop
 8005838:	2000096c 	.word	0x2000096c
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00c      	b.n	8005866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <prvInitialiseTaskLists+0x60>)
 8005858:	4413      	add	r3, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe f9cc 	bl	8003bf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b37      	cmp	r3, #55	; 0x37
 800586a:	d9ef      	bls.n	800584c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800586c:	480d      	ldr	r0, [pc, #52]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800586e:	f7fe f9c3 	bl	8003bf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005872:	480d      	ldr	r0, [pc, #52]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005874:	f7fe f9c0 	bl	8003bf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005878:	480c      	ldr	r0, [pc, #48]	; (80058ac <prvInitialiseTaskLists+0x6c>)
 800587a:	f7fe f9bd 	bl	8003bf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800587e:	480c      	ldr	r0, [pc, #48]	; (80058b0 <prvInitialiseTaskLists+0x70>)
 8005880:	f7fe f9ba 	bl	8003bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005884:	480b      	ldr	r0, [pc, #44]	; (80058b4 <prvInitialiseTaskLists+0x74>)
 8005886:	f7fe f9b7 	bl	8003bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvInitialiseTaskLists+0x78>)
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800588e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvInitialiseTaskLists+0x7c>)
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2000096c 	.word	0x2000096c
 80058a4:	20000dcc 	.word	0x20000dcc
 80058a8:	20000de0 	.word	0x20000de0
 80058ac:	20000dfc 	.word	0x20000dfc
 80058b0:	20000e10 	.word	0x20000e10
 80058b4:	20000e28 	.word	0x20000e28
 80058b8:	20000df4 	.word	0x20000df4
 80058bc:	20000df8 	.word	0x20000df8

080058c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c6:	e019      	b.n	80058fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058c8:	f000 fed4 	bl	8006674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fa17 	bl	8003d0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058f2:	f000 feef 	bl	80066d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f810 	bl	800591c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e1      	bne.n	80058c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000e10 	.word	0x20000e10
 8005914:	20000e3c 	.word	0x20000e3c
 8005918:	20000e24 	.word	0x20000e24

0800591c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4618      	mov	r0, r3
 8005934:	f001 f88c 	bl	8006a50 <vPortFree>
				vPortFree( pxTCB );
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 f889 	bl	8006a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800593e:	e018      	b.n	8005972 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005946:	2b01      	cmp	r3, #1
 8005948:	d103      	bne.n	8005952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 f880 	bl	8006a50 <vPortFree>
	}
 8005950:	e00f      	b.n	8005972 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005958:	2b02      	cmp	r3, #2
 800595a:	d00a      	beq.n	8005972 <prvDeleteTCB+0x56>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <prvDeleteTCB+0x54>
	}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <prvResetNextTaskUnblockTime+0x38>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <prvResetNextTaskUnblockTime+0x3c>)
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005994:	e008      	b.n	80059a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <prvResetNextTaskUnblockTime+0x38>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <prvResetNextTaskUnblockTime+0x3c>)
 80059a6:	6013      	str	r3, [r2, #0]
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	20000df4 	.word	0x20000df4
 80059b8:	20000e5c 	.word	0x20000e5c

080059bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059c2:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <xTaskGetSchedulerState+0x34>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059ca:	2301      	movs	r3, #1
 80059cc:	607b      	str	r3, [r7, #4]
 80059ce:	e008      	b.n	80059e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d0:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <xTaskGetSchedulerState+0x38>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059d8:	2302      	movs	r3, #2
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e001      	b.n	80059e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059e2:	687b      	ldr	r3, [r7, #4]
	}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20000e48 	.word	0x20000e48
 80059f4:	20000e64 	.word	0x20000e64

080059f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d051      	beq.n	8005ab2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a12:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <xTaskPriorityInherit+0xc4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d241      	bcs.n	8005aa0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	db06      	blt.n	8005a32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <xTaskPriorityInherit+0xc4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6959      	ldr	r1, [r3, #20]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <xTaskPriorityInherit+0xc8>)
 8005a44:	4413      	add	r3, r2
 8005a46:	4299      	cmp	r1, r3
 8005a48:	d122      	bne.n	8005a90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe f95c 	bl	8003d0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a54:	4b19      	ldr	r3, [pc, #100]	; (8005abc <xTaskPriorityInherit+0xc4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <xTaskPriorityInherit+0xcc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d903      	bls.n	8005a72 <xTaskPriorityInherit+0x7a>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <xTaskPriorityInherit+0xcc>)
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <xTaskPriorityInherit+0xc8>)
 8005a80:	441a      	add	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fe f8e2 	bl	8003c52 <vListInsertEnd>
 8005a8e:	e004      	b.n	8005a9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <xTaskPriorityInherit+0xc4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e008      	b.n	8005ab2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <xTaskPriorityInherit+0xc4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d201      	bcs.n	8005ab2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000968 	.word	0x20000968
 8005ac0:	2000096c 	.word	0x2000096c
 8005ac4:	20000e44 	.word	0x20000e44

08005ac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d056      	beq.n	8005b8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ade:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <xTaskPriorityDisinherit+0xd0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d00a      	beq.n	8005afe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60fb      	str	r3, [r7, #12]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60bb      	str	r3, [r7, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d02c      	beq.n	8005b8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d128      	bne.n	8005b8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe f8e4 	bl	8003d0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <xTaskPriorityDisinherit+0xd4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d903      	bls.n	8005b6c <xTaskPriorityDisinherit+0xa4>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4a0c      	ldr	r2, [pc, #48]	; (8005b9c <xTaskPriorityDisinherit+0xd4>)
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <xTaskPriorityDisinherit+0xd8>)
 8005b7a:	441a      	add	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fe f865 	bl	8003c52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b8c:	697b      	ldr	r3, [r7, #20]
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000968 	.word	0x20000968
 8005b9c:	20000e44 	.word	0x20000e44
 8005ba0:	2000096c 	.word	0x2000096c

08005ba4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d06a      	beq.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d902      	bls.n	8005bea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e002      	b.n	8005bf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d04b      	beq.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d146      	bne.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c04:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d10a      	bne.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	60bb      	str	r3, [r7, #8]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	db04      	blt.n	8005c42 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	6959      	ldr	r1, [r3, #20]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c52:	4413      	add	r3, r2
 8005c54:	4299      	cmp	r1, r3
 8005c56:	d11c      	bne.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe f855 	bl	8003d0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d903      	bls.n	8005c76 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c84:	441a      	add	r2, r3
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fd ffe0 	bl	8003c52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c92:	bf00      	nop
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000968 	.word	0x20000968
 8005ca0:	2000096c 	.word	0x2000096c
 8005ca4:	20000e44 	.word	0x20000e44

08005ca8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <pvTaskIncrementMutexHeldCount+0x24>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <pvTaskIncrementMutexHeldCount+0x24>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cba:	3201      	adds	r2, #1
 8005cbc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <pvTaskIncrementMutexHeldCount+0x24>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
	}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000968 	.word	0x20000968

08005cd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cda:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce0:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe f810 	bl	8003d0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d10a      	bne.n	8005d0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4819      	ldr	r0, [pc, #100]	; (8005d68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d04:	f7fd ffa5 	bl	8003c52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d08:	e026      	b.n	8005d58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d12:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d209      	bcs.n	8005d36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f7fd ffb3 	bl	8003c9a <vListInsert>
}
 8005d34:	e010      	b.n	8005d58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d36:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f7fd ffa9 	bl	8003c9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d48:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d202      	bcs.n	8005d58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d52:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000e40 	.word	0x20000e40
 8005d64:	20000968 	.word	0x20000968
 8005d68:	20000e28 	.word	0x20000e28
 8005d6c:	20000df8 	.word	0x20000df8
 8005d70:	20000df4 	.word	0x20000df4
 8005d74:	20000e5c 	.word	0x20000e5c

08005d78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d82:	f000 fb07 	bl	8006394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <xTimerCreateTimerTask+0x80>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d021      	beq.n	8005dd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d96:	1d3a      	adds	r2, r7, #4
 8005d98:	f107 0108 	add.w	r1, r7, #8
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fd ff0f 	bl	8003bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	9202      	str	r2, [sp, #8]
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	2302      	movs	r3, #2
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	460a      	mov	r2, r1
 8005db8:	4910      	ldr	r1, [pc, #64]	; (8005dfc <xTimerCreateTimerTask+0x84>)
 8005dba:	4811      	ldr	r0, [pc, #68]	; (8005e00 <xTimerCreateTimerTask+0x88>)
 8005dbc:	f7fe ffde 	bl	8004d7c <xTaskCreateStatic>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <xTimerCreateTimerTask+0x8c>)
 8005dc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <xTimerCreateTimerTask+0x8c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	613b      	str	r3, [r7, #16]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005dee:	697b      	ldr	r3, [r7, #20]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20000e98 	.word	0x20000e98
 8005dfc:	0800787c 	.word	0x0800787c
 8005e00:	08005f3d 	.word	0x08005f3d
 8005e04:	20000e9c 	.word	0x20000e9c

08005e08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	623b      	str	r3, [r7, #32]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <xTimerGenericCommand+0x98>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d02a      	beq.n	8005e94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b05      	cmp	r3, #5
 8005e4e:	dc18      	bgt.n	8005e82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e50:	f7ff fdb4 	bl	80059bc <xTaskGetSchedulerState>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d109      	bne.n	8005e6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <xTimerGenericCommand+0x98>)
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	f107 0110 	add.w	r1, r7, #16
 8005e62:	2300      	movs	r3, #0
 8005e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e66:	f7fe f923 	bl	80040b0 <xQueueGenericSend>
 8005e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e6c:	e012      	b.n	8005e94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <xTimerGenericCommand+0x98>)
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	f107 0110 	add.w	r1, r7, #16
 8005e76:	2300      	movs	r3, #0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f7fe f919 	bl	80040b0 <xQueueGenericSend>
 8005e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e80:	e008      	b.n	8005e94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <xTimerGenericCommand+0x98>)
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	f107 0110 	add.w	r1, r7, #16
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	f7fe fa0d 	bl	80042ac <xQueueGenericSendFromISR>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3728      	adds	r7, #40	; 0x28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000e98 	.word	0x20000e98

08005ea4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eae:	4b22      	ldr	r3, [pc, #136]	; (8005f38 <prvProcessExpiredTimer+0x94>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fd ff25 	bl	8003d0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d022      	beq.n	8005f16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	18d1      	adds	r1, r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	6978      	ldr	r0, [r7, #20]
 8005ede:	f000 f8d1 	bl	8006084 <prvInsertTimerInActiveList>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01f      	beq.n	8005f28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2300      	movs	r3, #0
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f7ff ff88 	bl	8005e08 <xTimerGenericCommand>
 8005ef8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d113      	bne.n	8005f28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	6978      	ldr	r0, [r7, #20]
 8005f2e:	4798      	blx	r3
}
 8005f30:	bf00      	nop
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000e90 	.word	0x20000e90

08005f3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f44:	f107 0308 	add.w	r3, r7, #8
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f857 	bl	8005ffc <prvGetNextExpireTime>
 8005f4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4619      	mov	r1, r3
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f803 	bl	8005f60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f5a:	f000 f8d5 	bl	8006108 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f5e:	e7f1      	b.n	8005f44 <prvTimerTask+0x8>

08005f60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f6a:	f7ff f943 	bl	80051f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f866 	bl	8006044 <prvSampleTimeNow>
 8005f78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d130      	bne.n	8005fe2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <prvProcessTimerOrBlockTask+0x3c>
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d806      	bhi.n	8005f9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f8e:	f7ff f93f 	bl	8005210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ff85 	bl	8005ea4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f9a:	e024      	b.n	8005fe6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <prvProcessTimerOrBlockTask+0x90>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <prvProcessTimerOrBlockTask+0x50>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <prvProcessTimerOrBlockTask+0x52>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <prvProcessTimerOrBlockTask+0x94>)
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	f7fe fea7 	bl	8004d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fc6:	f7ff f923 	bl	8005210 <xTaskResumeAll>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fd0:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <prvProcessTimerOrBlockTask+0x98>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
}
 8005fe0:	e001      	b.n	8005fe6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fe2:	f7ff f915 	bl	8005210 <xTaskResumeAll>
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000e94 	.word	0x20000e94
 8005ff4:	20000e98 	.word	0x20000e98
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <prvGetNextExpireTime+0x44>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <prvGetNextExpireTime+0x16>
 800600e:	2201      	movs	r2, #1
 8006010:	e000      	b.n	8006014 <prvGetNextExpireTime+0x18>
 8006012:	2200      	movs	r2, #0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <prvGetNextExpireTime+0x44>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e001      	b.n	8006030 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000e90 	.word	0x20000e90

08006044 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800604c:	f7ff f97e 	bl	800534c <xTaskGetTickCount>
 8006050:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <prvSampleTimeNow+0x3c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	429a      	cmp	r2, r3
 800605a:	d205      	bcs.n	8006068 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800605c:	f000 f936 	bl	80062cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e002      	b.n	800606e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800606e:	4a04      	ldr	r2, [pc, #16]	; (8006080 <prvSampleTimeNow+0x3c>)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000ea0 	.word	0x20000ea0

08006084 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d812      	bhi.n	80060d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d302      	bcc.n	80060be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e01b      	b.n	80060f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <prvInsertTimerInActiveList+0x7c>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f7fd fde6 	bl	8003c9a <vListInsert>
 80060ce:	e012      	b.n	80060f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d206      	bcs.n	80060e6 <prvInsertTimerInActiveList+0x62>
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d302      	bcc.n	80060e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060e0:	2301      	movs	r3, #1
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	e007      	b.n	80060f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <prvInsertTimerInActiveList+0x80>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7fd fdd2 	bl	8003c9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060f6:	697b      	ldr	r3, [r7, #20]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000e94 	.word	0x20000e94
 8006104:	20000e90 	.word	0x20000e90

08006108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800610e:	e0ca      	b.n	80062a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	da18      	bge.n	8006148 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	3304      	adds	r3, #4
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	61fb      	str	r3, [r7, #28]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800613e:	6850      	ldr	r0, [r2, #4]
 8006140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006142:	6892      	ldr	r2, [r2, #8]
 8006144:	4611      	mov	r1, r2
 8006146:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f2c0 80ab 	blt.w	80062a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7fd fdd3 	bl	8003d0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006166:	463b      	mov	r3, r7
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff6b 	bl	8006044 <prvSampleTimeNow>
 800616e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b09      	cmp	r3, #9
 8006174:	f200 8096 	bhi.w	80062a4 <prvProcessReceivedCommands+0x19c>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <prvProcessReceivedCommands+0x78>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061a9 	.word	0x080061a9
 800618c:	0800621d 	.word	0x0800621d
 8006190:	08006231 	.word	0x08006231
 8006194:	0800627b 	.word	0x0800627b
 8006198:	080061a9 	.word	0x080061a9
 800619c:	080061a9 	.word	0x080061a9
 80061a0:	0800621d 	.word	0x0800621d
 80061a4:	08006231 	.word	0x08006231
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	18d1      	adds	r1, r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c8:	f7ff ff5c 	bl	8006084 <prvInsertTimerInActiveList>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d069      	beq.n	80062a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d05e      	beq.n	80062a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	441a      	add	r2, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	2100      	movs	r1, #0
 80061f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061fa:	f7ff fe05 	bl	8005e08 <xTimerGenericCommand>
 80061fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d14f      	bne.n	80062a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	61bb      	str	r3, [r7, #24]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006222:	f023 0301 	bic.w	r3, r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800622e:	e03a      	b.n	80062a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006236:	f043 0301 	orr.w	r3, r3, #1
 800623a:	b2da      	uxtb	r2, r3
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	617b      	str	r3, [r7, #20]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	18d1      	adds	r1, r2, r3
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	f7ff ff06 	bl	8006084 <prvInsertTimerInActiveList>
					break;
 8006278:	e015      	b.n	80062a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628a:	f000 fbe1 	bl	8006a50 <vPortFree>
 800628e:	e00a      	b.n	80062a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062a2:	e000      	b.n	80062a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80062a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <prvProcessReceivedCommands+0x1c0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	1d39      	adds	r1, r7, #4
 80062ac:	2200      	movs	r2, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe f924 	bl	80044fc <xQueueReceive>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f47f af2a 	bne.w	8006110 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	3730      	adds	r7, #48	; 0x30
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000e98 	.word	0x20000e98

080062cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062d2:	e048      	b.n	8006366 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062d4:	4b2d      	ldr	r3, [pc, #180]	; (800638c <prvSwitchTimerLists+0xc0>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062de:	4b2b      	ldr	r3, [pc, #172]	; (800638c <prvSwitchTimerLists+0xc0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fd fd0d 	bl	8003d0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02e      	beq.n	8006366 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4413      	add	r3, r2
 8006310:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	d90e      	bls.n	8006338 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006326:	4b19      	ldr	r3, [pc, #100]	; (800638c <prvSwitchTimerLists+0xc0>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3304      	adds	r3, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7fd fcb2 	bl	8003c9a <vListInsert>
 8006336:	e016      	b.n	8006366 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006338:	2300      	movs	r3, #0
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	2100      	movs	r1, #0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fd60 	bl	8005e08 <xTimerGenericCommand>
 8006348:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	603b      	str	r3, [r7, #0]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <prvSwitchTimerLists+0xc0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1b1      	bne.n	80062d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <prvSwitchTimerLists+0xc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <prvSwitchTimerLists+0xc4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a04      	ldr	r2, [pc, #16]	; (800638c <prvSwitchTimerLists+0xc0>)
 800637c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800637e:	4a04      	ldr	r2, [pc, #16]	; (8006390 <prvSwitchTimerLists+0xc4>)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000e90 	.word	0x20000e90
 8006390:	20000e94 	.word	0x20000e94

08006394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800639a:	f000 f96b 	bl	8006674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <prvCheckForValidListAndQueue+0x60>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d120      	bne.n	80063e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063a6:	4814      	ldr	r0, [pc, #80]	; (80063f8 <prvCheckForValidListAndQueue+0x64>)
 80063a8:	f7fd fc26 	bl	8003bf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063ac:	4813      	ldr	r0, [pc, #76]	; (80063fc <prvCheckForValidListAndQueue+0x68>)
 80063ae:	f7fd fc23 	bl	8003bf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063b2:	4b13      	ldr	r3, [pc, #76]	; (8006400 <prvCheckForValidListAndQueue+0x6c>)
 80063b4:	4a10      	ldr	r2, [pc, #64]	; (80063f8 <prvCheckForValidListAndQueue+0x64>)
 80063b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <prvCheckForValidListAndQueue+0x70>)
 80063ba:	4a10      	ldr	r2, [pc, #64]	; (80063fc <prvCheckForValidListAndQueue+0x68>)
 80063bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063be:	2300      	movs	r3, #0
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4b11      	ldr	r3, [pc, #68]	; (8006408 <prvCheckForValidListAndQueue+0x74>)
 80063c4:	4a11      	ldr	r2, [pc, #68]	; (800640c <prvCheckForValidListAndQueue+0x78>)
 80063c6:	2110      	movs	r1, #16
 80063c8:	200a      	movs	r0, #10
 80063ca:	f7fd fd31 	bl	8003e30 <xQueueGenericCreateStatic>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <prvCheckForValidListAndQueue+0x60>)
 80063d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <prvCheckForValidListAndQueue+0x60>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <prvCheckForValidListAndQueue+0x60>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	490b      	ldr	r1, [pc, #44]	; (8006410 <prvCheckForValidListAndQueue+0x7c>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fc42 	bl	8004c6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e8:	f000 f974 	bl	80066d4 <vPortExitCritical>
}
 80063ec:	bf00      	nop
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000e98 	.word	0x20000e98
 80063f8:	20000e68 	.word	0x20000e68
 80063fc:	20000e7c 	.word	0x20000e7c
 8006400:	20000e90 	.word	0x20000e90
 8006404:	20000e94 	.word	0x20000e94
 8006408:	20000f44 	.word	0x20000f44
 800640c:	20000ea4 	.word	0x20000ea4
 8006410:	08007884 	.word	0x08007884

08006414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b04      	subs	r3, #4
 8006424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800642c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3b04      	subs	r3, #4
 8006432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3b04      	subs	r3, #4
 8006442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006444:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <pxPortInitialiseStack+0x64>)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3b14      	subs	r3, #20
 800644e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3b04      	subs	r3, #4
 800645a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f06f 0202 	mvn.w	r2, #2
 8006462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3b20      	subs	r3, #32
 8006468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800646a:	68fb      	ldr	r3, [r7, #12]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	0800647d 	.word	0x0800647d

0800647c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <prvTaskExitError+0x54>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d00a      	beq.n	80064a6 <prvTaskExitError+0x2a>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60fb      	str	r3, [r7, #12]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <prvTaskExitError+0x28>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064ba:	bf00      	nop
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0fc      	beq.n	80064bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	2000000c 	.word	0x2000000c
	...

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	4770      	bx	lr
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst2>:
 8006500:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <prvPortStartFirstTask+0x24>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8814 	msr	CONTROL, r0
 800651a:	b662      	cpsie	i
 800651c:	b661      	cpsie	f
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	df00      	svc	0
 8006528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800652a:	bf00      	nop
 800652c:	e000ed08 	.word	0xe000ed08

08006530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006536:	4b46      	ldr	r3, [pc, #280]	; (8006650 <xPortStartScheduler+0x120>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a46      	ldr	r2, [pc, #280]	; (8006654 <xPortStartScheduler+0x124>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10a      	bne.n	8006556 <xPortStartScheduler+0x26>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006556:	4b3e      	ldr	r3, [pc, #248]	; (8006650 <xPortStartScheduler+0x120>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <xPortStartScheduler+0x128>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10a      	bne.n	8006576 <xPortStartScheduler+0x46>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <xPortStartScheduler+0x12c>)
 8006578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b31      	ldr	r3, [pc, #196]	; (8006660 <xPortStartScheduler+0x130>)
 800659c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <xPortStartScheduler+0x134>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a4:	e009      	b.n	80065ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065a6:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <xPortStartScheduler+0x134>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4a2d      	ldr	r2, [pc, #180]	; (8006664 <xPortStartScheduler+0x134>)
 80065ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b80      	cmp	r3, #128	; 0x80
 80065c4:	d0ef      	beq.n	80065a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065c6:	4b27      	ldr	r3, [pc, #156]	; (8006664 <xPortStartScheduler+0x134>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1c3 0307 	rsb	r3, r3, #7
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d00a      	beq.n	80065e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	60bb      	str	r3, [r7, #8]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065e8:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <xPortStartScheduler+0x134>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <xPortStartScheduler+0x134>)
 80065f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xPortStartScheduler+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065fa:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <xPortStartScheduler+0x134>)
 80065fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <xPortStartScheduler+0x138>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <xPortStartScheduler+0x138>)
 800660c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <xPortStartScheduler+0x138>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a14      	ldr	r2, [pc, #80]	; (8006668 <xPortStartScheduler+0x138>)
 8006618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800661c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800661e:	f000 f8dd 	bl	80067dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <xPortStartScheduler+0x13c>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006628:	f000 f8fc 	bl	8006824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <xPortStartScheduler+0x140>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <xPortStartScheduler+0x140>)
 8006632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006638:	f7ff ff66 	bl	8006508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800663c:	f7fe ff50 	bl	80054e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006640:	f7ff ff1c 	bl	800647c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	e000ed00 	.word	0xe000ed00
 8006654:	410fc271 	.word	0x410fc271
 8006658:	410fc270 	.word	0x410fc270
 800665c:	e000e400 	.word	0xe000e400
 8006660:	20000f94 	.word	0x20000f94
 8006664:	20000f98 	.word	0x20000f98
 8006668:	e000ed20 	.word	0xe000ed20
 800666c:	2000000c 	.word	0x2000000c
 8006670:	e000ef34 	.word	0xe000ef34

08006674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
}
 800668c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <vPortEnterCritical+0x58>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <vPortEnterCritical+0x58>)
 8006696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <vPortEnterCritical+0x58>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10f      	bne.n	80066c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <vPortEnterCritical+0x5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	603b      	str	r3, [r7, #0]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vPortEnterCritical+0x4a>
	}
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	2000000c 	.word	0x2000000c
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <vPortExitCritical+0x50>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <vPortExitCritical+0x24>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	607b      	str	r3, [r7, #4]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <vPortExitCritical+0x50>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <vPortExitCritical+0x50>)
 8006700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <vPortExitCritical+0x50>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <vPortExitCritical+0x42>
 800670a:	2300      	movs	r3, #0
 800670c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f383 8811 	msr	BASEPRI, r3
}
 8006714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	2000000c 	.word	0x2000000c
	...

08006730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006730:	f3ef 8009 	mrs	r0, PSP
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <pxCurrentTCBConst>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f01e 0f10 	tst.w	lr, #16
 8006740:	bf08      	it	eq
 8006742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006754:	f380 8811 	msr	BASEPRI, r0
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f7fe febe 	bl	80054e0 <vTaskSwitchContext>
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f380 8811 	msr	BASEPRI, r0
 800676c:	bc09      	pop	{r0, r3}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	f01e 0f10 	tst.w	lr, #16
 800677a:	bf08      	it	eq
 800677c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006780:	f380 8809 	msr	PSP, r0
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst>:
 8006790:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067b2:	f7fe fddb 	bl	800536c <xTaskIncrementTick>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <xPortSysTickHandler+0x40>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <vPortSetupTimerInterrupt+0x38>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <vPortSetupTimerInterrupt+0x3c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <vPortSetupTimerInterrupt+0x40>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <vPortSetupTimerInterrupt+0x44>)
 80067fa:	3b01      	subs	r3, #1
 80067fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010
 8006814:	e000e018 	.word	0xe000e018
 8006818:	20000000 	.word	0x20000000
 800681c:	10624dd3 	.word	0x10624dd3
 8006820:	e000e014 	.word	0xe000e014

08006824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006834 <vPortEnableVFP+0x10>
 8006828:	6801      	ldr	r1, [r0, #0]
 800682a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800682e:	6001      	str	r1, [r0, #0]
 8006830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006832:	bf00      	nop
 8006834:	e000ed88 	.word	0xe000ed88

08006838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800683e:	f3ef 8305 	mrs	r3, IPSR
 8006842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d914      	bls.n	8006874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <vPortValidateInterruptPriority+0x70>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006854:	4b15      	ldr	r3, [pc, #84]	; (80068ac <vPortValidateInterruptPriority+0x74>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	7afa      	ldrb	r2, [r7, #11]
 800685a:	429a      	cmp	r2, r3
 800685c:	d20a      	bcs.n	8006874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <vPortValidateInterruptPriority+0x78>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <vPortValidateInterruptPriority+0x7c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d90a      	bls.n	800689a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	603b      	str	r3, [r7, #0]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <vPortValidateInterruptPriority+0x60>
	}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	e000e3f0 	.word	0xe000e3f0
 80068ac:	20000f94 	.word	0x20000f94
 80068b0:	e000ed0c 	.word	0xe000ed0c
 80068b4:	20000f98 	.word	0x20000f98

080068b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068c4:	f7fe fc96 	bl	80051f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068c8:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <pvPortMalloc+0x180>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068d0:	f000 f920 	bl	8006b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068d4:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <pvPortMalloc+0x184>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 8093 	bne.w	8006a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01d      	beq.n	8006924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80068e8:	2208      	movs	r2, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d014      	beq.n	8006924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f023 0307 	bic.w	r3, r3, #7
 8006900:	3308      	adds	r3, #8
 8006902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <pvPortMalloc+0x6c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	617b      	str	r3, [r7, #20]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d06e      	beq.n	8006a08 <pvPortMalloc+0x150>
 800692a:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <pvPortMalloc+0x188>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d869      	bhi.n	8006a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006934:	4b43      	ldr	r3, [pc, #268]	; (8006a44 <pvPortMalloc+0x18c>)
 8006936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006938:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <pvPortMalloc+0x18c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800693e:	e004      	b.n	800694a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d903      	bls.n	800695c <pvPortMalloc+0xa4>
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f1      	bne.n	8006940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800695c:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <pvPortMalloc+0x180>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	429a      	cmp	r2, r3
 8006964:	d050      	beq.n	8006a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2208      	movs	r2, #8
 800696c:	4413      	add	r3, r2
 800696e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	2308      	movs	r3, #8
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	429a      	cmp	r2, r3
 8006986:	d91f      	bls.n	80069c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <pvPortMalloc+0xf8>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	613b      	str	r3, [r7, #16]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	1ad2      	subs	r2, r2, r3
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069c2:	69b8      	ldr	r0, [r7, #24]
 80069c4:	f000 f908 	bl	8006bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <pvPortMalloc+0x188>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <pvPortMalloc+0x188>)
 80069d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069d6:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <pvPortMalloc+0x188>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <pvPortMalloc+0x190>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d203      	bcs.n	80069ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069e2:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <pvPortMalloc+0x188>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <pvPortMalloc+0x190>)
 80069e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <pvPortMalloc+0x184>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <pvPortMalloc+0x194>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <pvPortMalloc+0x194>)
 8006a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a08:	f7fe fc02 	bl	8005210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <pvPortMalloc+0x174>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60fb      	str	r3, [r7, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <pvPortMalloc+0x172>
	return pvReturn;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20004ba4 	.word	0x20004ba4
 8006a3c:	20004bb8 	.word	0x20004bb8
 8006a40:	20004ba8 	.word	0x20004ba8
 8006a44:	20004b9c 	.word	0x20004b9c
 8006a48:	20004bac 	.word	0x20004bac
 8006a4c:	20004bb0 	.word	0x20004bb0

08006a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d04d      	beq.n	8006afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a62:	2308      	movs	r3, #8
 8006a64:	425b      	negs	r3, r3
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <vPortFree+0xb8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <vPortFree+0x44>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	60fb      	str	r3, [r7, #12]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <vPortFree+0x62>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60bb      	str	r3, [r7, #8]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <vPortFree+0xb8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01e      	beq.n	8006afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11a      	bne.n	8006afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <vPortFree+0xb8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ad8:	f7fe fb8c 	bl	80051f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <vPortFree+0xbc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <vPortFree+0xbc>)
 8006ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f000 f874 	bl	8006bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <vPortFree+0xc0>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a06      	ldr	r2, [pc, #24]	; (8006b10 <vPortFree+0xc0>)
 8006af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006afa:	f7fe fb89 	bl	8005210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006afe:	bf00      	nop
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20004bb8 	.word	0x20004bb8
 8006b0c:	20004ba8 	.word	0x20004ba8
 8006b10:	20004bb4 	.word	0x20004bb4

08006b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b20:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <prvHeapInit+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3307      	adds	r3, #7
 8006b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <prvHeapInit+0xac>)
 8006b44:	4413      	add	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <prvHeapInit+0xb0>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <prvHeapInit+0xb0>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b60:	2208      	movs	r2, #8
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0307 	bic.w	r3, r3, #7
 8006b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <prvHeapInit+0xb8>)
 8006ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <prvHeapInit+0xbc>)
 8006baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bac:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <prvHeapInit+0xc0>)
 8006bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20000f9c 	.word	0x20000f9c
 8006bc4:	20004b9c 	.word	0x20004b9c
 8006bc8:	20004ba4 	.word	0x20004ba4
 8006bcc:	20004bac 	.word	0x20004bac
 8006bd0:	20004ba8 	.word	0x20004ba8
 8006bd4:	20004bb8 	.word	0x20004bb8

08006bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <prvInsertBlockIntoFreeList+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e002      	b.n	8006bec <prvInsertBlockIntoFreeList+0x14>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d8f7      	bhi.n	8006be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d108      	bne.n	8006c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	441a      	add	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	441a      	add	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d118      	bne.n	8006c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <prvInsertBlockIntoFreeList+0xb0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d00d      	beq.n	8006c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e008      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <prvInsertBlockIntoFreeList+0xb0>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e003      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d002      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20004b9c 	.word	0x20004b9c
 8006c88:	20004ba4 	.word	0x20004ba4

08006c8c <_vsiprintf_r>:
 8006c8c:	b500      	push	{lr}
 8006c8e:	b09b      	sub	sp, #108	; 0x6c
 8006c90:	9100      	str	r1, [sp, #0]
 8006c92:	9104      	str	r1, [sp, #16]
 8006c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	9102      	str	r1, [sp, #8]
 8006c9c:	4905      	ldr	r1, [pc, #20]	; (8006cb4 <_vsiprintf_r+0x28>)
 8006c9e:	9103      	str	r1, [sp, #12]
 8006ca0:	4669      	mov	r1, sp
 8006ca2:	f000 f9a7 	bl	8006ff4 <_svfiprintf_r>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	b01b      	add	sp, #108	; 0x6c
 8006cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cb2:	bf00      	nop
 8006cb4:	ffff0208 	.word	0xffff0208

08006cb8 <vsiprintf>:
 8006cb8:	4613      	mov	r3, r2
 8006cba:	460a      	mov	r2, r1
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	4802      	ldr	r0, [pc, #8]	; (8006cc8 <vsiprintf+0x10>)
 8006cc0:	6800      	ldr	r0, [r0, #0]
 8006cc2:	f7ff bfe3 	b.w	8006c8c <_vsiprintf_r>
 8006cc6:	bf00      	nop
 8006cc8:	2000005c 	.word	0x2000005c

08006ccc <memset>:
 8006ccc:	4402      	add	r2, r0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <memset+0xa>
 8006cd4:	4770      	bx	lr
 8006cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cda:	e7f9      	b.n	8006cd0 <memset+0x4>

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	2000005c 	.word	0x2000005c

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4d0d      	ldr	r5, [pc, #52]	; (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	; (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1b64      	subs	r4, r4, r5
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4d0b      	ldr	r5, [pc, #44]	; (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	; (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f000 fc6a 	bl	80075d4 <_init>
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2600      	movs	r6, #0
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	080079b4 	.word	0x080079b4
 8006d24:	080079b4 	.word	0x080079b4
 8006d28:	080079b4 	.word	0x080079b4
 8006d2c:	080079b8 	.word	0x080079b8

08006d30 <__retarget_lock_acquire_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__retarget_lock_release_recursive>:
 8006d32:	4770      	bx	lr

08006d34 <memcpy>:
 8006d34:	440a      	add	r2, r1
 8006d36:	4291      	cmp	r1, r2
 8006d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d3c:	d100      	bne.n	8006d40 <memcpy+0xc>
 8006d3e:	4770      	bx	lr
 8006d40:	b510      	push	{r4, lr}
 8006d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	d1f9      	bne.n	8006d42 <memcpy+0xe>
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <_free_r>:
 8006d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d044      	beq.n	8006de0 <_free_r+0x90>
 8006d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5a:	9001      	str	r0, [sp, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d62:	bfb8      	it	lt
 8006d64:	18e4      	addlt	r4, r4, r3
 8006d66:	f000 f8df 	bl	8006f28 <__malloc_lock>
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <_free_r+0x94>)
 8006d6c:	9801      	ldr	r0, [sp, #4]
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	b933      	cbnz	r3, 8006d80 <_free_r+0x30>
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	6014      	str	r4, [r2, #0]
 8006d76:	b003      	add	sp, #12
 8006d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d7c:	f000 b8da 	b.w	8006f34 <__malloc_unlock>
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d908      	bls.n	8006d96 <_free_r+0x46>
 8006d84:	6825      	ldr	r5, [r4, #0]
 8006d86:	1961      	adds	r1, r4, r5
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1949      	addeq	r1, r1, r5
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	e7ed      	b.n	8006d72 <_free_r+0x22>
 8006d96:	461a      	mov	r2, r3
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	b10b      	cbz	r3, 8006da0 <_free_r+0x50>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d9fa      	bls.n	8006d96 <_free_r+0x46>
 8006da0:	6811      	ldr	r1, [r2, #0]
 8006da2:	1855      	adds	r5, r2, r1
 8006da4:	42a5      	cmp	r5, r4
 8006da6:	d10b      	bne.n	8006dc0 <_free_r+0x70>
 8006da8:	6824      	ldr	r4, [r4, #0]
 8006daa:	4421      	add	r1, r4
 8006dac:	1854      	adds	r4, r2, r1
 8006dae:	42a3      	cmp	r3, r4
 8006db0:	6011      	str	r1, [r2, #0]
 8006db2:	d1e0      	bne.n	8006d76 <_free_r+0x26>
 8006db4:	681c      	ldr	r4, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	6053      	str	r3, [r2, #4]
 8006dba:	440c      	add	r4, r1
 8006dbc:	6014      	str	r4, [r2, #0]
 8006dbe:	e7da      	b.n	8006d76 <_free_r+0x26>
 8006dc0:	d902      	bls.n	8006dc8 <_free_r+0x78>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	6003      	str	r3, [r0, #0]
 8006dc6:	e7d6      	b.n	8006d76 <_free_r+0x26>
 8006dc8:	6825      	ldr	r5, [r4, #0]
 8006dca:	1961      	adds	r1, r4, r5
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	bf04      	itt	eq
 8006dd0:	6819      	ldreq	r1, [r3, #0]
 8006dd2:	685b      	ldreq	r3, [r3, #4]
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	bf04      	itt	eq
 8006dd8:	1949      	addeq	r1, r1, r5
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	6054      	str	r4, [r2, #4]
 8006dde:	e7ca      	b.n	8006d76 <_free_r+0x26>
 8006de0:	b003      	add	sp, #12
 8006de2:	bd30      	pop	{r4, r5, pc}
 8006de4:	20004cfc 	.word	0x20004cfc

08006de8 <sbrk_aligned>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	4e0e      	ldr	r6, [pc, #56]	; (8006e24 <sbrk_aligned+0x3c>)
 8006dec:	460c      	mov	r4, r1
 8006dee:	6831      	ldr	r1, [r6, #0]
 8006df0:	4605      	mov	r5, r0
 8006df2:	b911      	cbnz	r1, 8006dfa <sbrk_aligned+0x12>
 8006df4:	f000 fba6 	bl	8007544 <_sbrk_r>
 8006df8:	6030      	str	r0, [r6, #0]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f000 fba1 	bl	8007544 <_sbrk_r>
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d00a      	beq.n	8006e1c <sbrk_aligned+0x34>
 8006e06:	1cc4      	adds	r4, r0, #3
 8006e08:	f024 0403 	bic.w	r4, r4, #3
 8006e0c:	42a0      	cmp	r0, r4
 8006e0e:	d007      	beq.n	8006e20 <sbrk_aligned+0x38>
 8006e10:	1a21      	subs	r1, r4, r0
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 fb96 	bl	8007544 <_sbrk_r>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d101      	bne.n	8006e20 <sbrk_aligned+0x38>
 8006e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e20:	4620      	mov	r0, r4
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	20004d00 	.word	0x20004d00

08006e28 <_malloc_r>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	1ccd      	adds	r5, r1, #3
 8006e2e:	f025 0503 	bic.w	r5, r5, #3
 8006e32:	3508      	adds	r5, #8
 8006e34:	2d0c      	cmp	r5, #12
 8006e36:	bf38      	it	cc
 8006e38:	250c      	movcc	r5, #12
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	db01      	blt.n	8006e44 <_malloc_r+0x1c>
 8006e40:	42a9      	cmp	r1, r5
 8006e42:	d905      	bls.n	8006e50 <_malloc_r+0x28>
 8006e44:	230c      	movs	r3, #12
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	2600      	movs	r6, #0
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f24 <_malloc_r+0xfc>
 8006e54:	f000 f868 	bl	8006f28 <__malloc_lock>
 8006e58:	f8d8 3000 	ldr.w	r3, [r8]
 8006e5c:	461c      	mov	r4, r3
 8006e5e:	bb5c      	cbnz	r4, 8006eb8 <_malloc_r+0x90>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7ff ffc0 	bl	8006de8 <sbrk_aligned>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	d155      	bne.n	8006f1a <_malloc_r+0xf2>
 8006e6e:	f8d8 4000 	ldr.w	r4, [r8]
 8006e72:	4626      	mov	r6, r4
 8006e74:	2e00      	cmp	r6, #0
 8006e76:	d145      	bne.n	8006f04 <_malloc_r+0xdc>
 8006e78:	2c00      	cmp	r4, #0
 8006e7a:	d048      	beq.n	8006f0e <_malloc_r+0xe6>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4638      	mov	r0, r7
 8006e82:	eb04 0903 	add.w	r9, r4, r3
 8006e86:	f000 fb5d 	bl	8007544 <_sbrk_r>
 8006e8a:	4581      	cmp	r9, r0
 8006e8c:	d13f      	bne.n	8006f0e <_malloc_r+0xe6>
 8006e8e:	6821      	ldr	r1, [r4, #0]
 8006e90:	1a6d      	subs	r5, r5, r1
 8006e92:	4629      	mov	r1, r5
 8006e94:	4638      	mov	r0, r7
 8006e96:	f7ff ffa7 	bl	8006de8 <sbrk_aligned>
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d037      	beq.n	8006f0e <_malloc_r+0xe6>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	442b      	add	r3, r5
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d038      	beq.n	8006f1e <_malloc_r+0xf6>
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	42a2      	cmp	r2, r4
 8006eb0:	d12b      	bne.n	8006f0a <_malloc_r+0xe2>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	e00f      	b.n	8006ed8 <_malloc_r+0xb0>
 8006eb8:	6822      	ldr	r2, [r4, #0]
 8006eba:	1b52      	subs	r2, r2, r5
 8006ebc:	d41f      	bmi.n	8006efe <_malloc_r+0xd6>
 8006ebe:	2a0b      	cmp	r2, #11
 8006ec0:	d917      	bls.n	8006ef2 <_malloc_r+0xca>
 8006ec2:	1961      	adds	r1, r4, r5
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	6025      	str	r5, [r4, #0]
 8006ec8:	bf18      	it	ne
 8006eca:	6059      	strne	r1, [r3, #4]
 8006ecc:	6863      	ldr	r3, [r4, #4]
 8006ece:	bf08      	it	eq
 8006ed0:	f8c8 1000 	streq.w	r1, [r8]
 8006ed4:	5162      	str	r2, [r4, r5]
 8006ed6:	604b      	str	r3, [r1, #4]
 8006ed8:	4638      	mov	r0, r7
 8006eda:	f104 060b 	add.w	r6, r4, #11
 8006ede:	f000 f829 	bl	8006f34 <__malloc_unlock>
 8006ee2:	f026 0607 	bic.w	r6, r6, #7
 8006ee6:	1d23      	adds	r3, r4, #4
 8006ee8:	1af2      	subs	r2, r6, r3
 8006eea:	d0ae      	beq.n	8006e4a <_malloc_r+0x22>
 8006eec:	1b9b      	subs	r3, r3, r6
 8006eee:	50a3      	str	r3, [r4, r2]
 8006ef0:	e7ab      	b.n	8006e4a <_malloc_r+0x22>
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	6862      	ldr	r2, [r4, #4]
 8006ef6:	d1dd      	bne.n	8006eb4 <_malloc_r+0x8c>
 8006ef8:	f8c8 2000 	str.w	r2, [r8]
 8006efc:	e7ec      	b.n	8006ed8 <_malloc_r+0xb0>
 8006efe:	4623      	mov	r3, r4
 8006f00:	6864      	ldr	r4, [r4, #4]
 8006f02:	e7ac      	b.n	8006e5e <_malloc_r+0x36>
 8006f04:	4634      	mov	r4, r6
 8006f06:	6876      	ldr	r6, [r6, #4]
 8006f08:	e7b4      	b.n	8006e74 <_malloc_r+0x4c>
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	e7cc      	b.n	8006ea8 <_malloc_r+0x80>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4638      	mov	r0, r7
 8006f14:	f000 f80e 	bl	8006f34 <__malloc_unlock>
 8006f18:	e797      	b.n	8006e4a <_malloc_r+0x22>
 8006f1a:	6025      	str	r5, [r4, #0]
 8006f1c:	e7dc      	b.n	8006ed8 <_malloc_r+0xb0>
 8006f1e:	605b      	str	r3, [r3, #4]
 8006f20:	deff      	udf	#255	; 0xff
 8006f22:	bf00      	nop
 8006f24:	20004cfc 	.word	0x20004cfc

08006f28 <__malloc_lock>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__malloc_lock+0x8>)
 8006f2a:	f7ff bf01 	b.w	8006d30 <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20004cf8 	.word	0x20004cf8

08006f34 <__malloc_unlock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_unlock+0x8>)
 8006f36:	f7ff befc 	b.w	8006d32 <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20004cf8 	.word	0x20004cf8

08006f40 <__ssputs_r>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	688e      	ldr	r6, [r1, #8]
 8006f46:	461f      	mov	r7, r3
 8006f48:	42be      	cmp	r6, r7
 8006f4a:	680b      	ldr	r3, [r1, #0]
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4690      	mov	r8, r2
 8006f52:	d82c      	bhi.n	8006fae <__ssputs_r+0x6e>
 8006f54:	898a      	ldrh	r2, [r1, #12]
 8006f56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f5a:	d026      	beq.n	8006faa <__ssputs_r+0x6a>
 8006f5c:	6965      	ldr	r5, [r4, #20]
 8006f5e:	6909      	ldr	r1, [r1, #16]
 8006f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f64:	eba3 0901 	sub.w	r9, r3, r1
 8006f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f6c:	1c7b      	adds	r3, r7, #1
 8006f6e:	444b      	add	r3, r9
 8006f70:	106d      	asrs	r5, r5, #1
 8006f72:	429d      	cmp	r5, r3
 8006f74:	bf38      	it	cc
 8006f76:	461d      	movcc	r5, r3
 8006f78:	0553      	lsls	r3, r2, #21
 8006f7a:	d527      	bpl.n	8006fcc <__ssputs_r+0x8c>
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7ff ff53 	bl	8006e28 <_malloc_r>
 8006f82:	4606      	mov	r6, r0
 8006f84:	b360      	cbz	r0, 8006fe0 <__ssputs_r+0xa0>
 8006f86:	6921      	ldr	r1, [r4, #16]
 8006f88:	464a      	mov	r2, r9
 8006f8a:	f7ff fed3 	bl	8006d34 <memcpy>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	6126      	str	r6, [r4, #16]
 8006f9c:	6165      	str	r5, [r4, #20]
 8006f9e:	444e      	add	r6, r9
 8006fa0:	eba5 0509 	sub.w	r5, r5, r9
 8006fa4:	6026      	str	r6, [r4, #0]
 8006fa6:	60a5      	str	r5, [r4, #8]
 8006fa8:	463e      	mov	r6, r7
 8006faa:	42be      	cmp	r6, r7
 8006fac:	d900      	bls.n	8006fb0 <__ssputs_r+0x70>
 8006fae:	463e      	mov	r6, r7
 8006fb0:	6820      	ldr	r0, [r4, #0]
 8006fb2:	4632      	mov	r2, r6
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	f000 faab 	bl	8007510 <memmove>
 8006fba:	68a3      	ldr	r3, [r4, #8]
 8006fbc:	1b9b      	subs	r3, r3, r6
 8006fbe:	60a3      	str	r3, [r4, #8]
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	4433      	add	r3, r6
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	462a      	mov	r2, r5
 8006fce:	f000 fac9 	bl	8007564 <_realloc_r>
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1e0      	bne.n	8006f9a <__ssputs_r+0x5a>
 8006fd8:	6921      	ldr	r1, [r4, #16]
 8006fda:	4650      	mov	r0, sl
 8006fdc:	f7ff feb8 	bl	8006d50 <_free_r>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	f8ca 3000 	str.w	r3, [sl]
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	e7e9      	b.n	8006fc8 <__ssputs_r+0x88>

08006ff4 <_svfiprintf_r>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	4698      	mov	r8, r3
 8006ffa:	898b      	ldrh	r3, [r1, #12]
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	b09d      	sub	sp, #116	; 0x74
 8007000:	4607      	mov	r7, r0
 8007002:	460d      	mov	r5, r1
 8007004:	4614      	mov	r4, r2
 8007006:	d50e      	bpl.n	8007026 <_svfiprintf_r+0x32>
 8007008:	690b      	ldr	r3, [r1, #16]
 800700a:	b963      	cbnz	r3, 8007026 <_svfiprintf_r+0x32>
 800700c:	2140      	movs	r1, #64	; 0x40
 800700e:	f7ff ff0b 	bl	8006e28 <_malloc_r>
 8007012:	6028      	str	r0, [r5, #0]
 8007014:	6128      	str	r0, [r5, #16]
 8007016:	b920      	cbnz	r0, 8007022 <_svfiprintf_r+0x2e>
 8007018:	230c      	movs	r3, #12
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	e0d0      	b.n	80071c4 <_svfiprintf_r+0x1d0>
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	616b      	str	r3, [r5, #20]
 8007026:	2300      	movs	r3, #0
 8007028:	9309      	str	r3, [sp, #36]	; 0x24
 800702a:	2320      	movs	r3, #32
 800702c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007030:	f8cd 800c 	str.w	r8, [sp, #12]
 8007034:	2330      	movs	r3, #48	; 0x30
 8007036:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071dc <_svfiprintf_r+0x1e8>
 800703a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703e:	f04f 0901 	mov.w	r9, #1
 8007042:	4623      	mov	r3, r4
 8007044:	469a      	mov	sl, r3
 8007046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704a:	b10a      	cbz	r2, 8007050 <_svfiprintf_r+0x5c>
 800704c:	2a25      	cmp	r2, #37	; 0x25
 800704e:	d1f9      	bne.n	8007044 <_svfiprintf_r+0x50>
 8007050:	ebba 0b04 	subs.w	fp, sl, r4
 8007054:	d00b      	beq.n	800706e <_svfiprintf_r+0x7a>
 8007056:	465b      	mov	r3, fp
 8007058:	4622      	mov	r2, r4
 800705a:	4629      	mov	r1, r5
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ff6f 	bl	8006f40 <__ssputs_r>
 8007062:	3001      	adds	r0, #1
 8007064:	f000 80a9 	beq.w	80071ba <_svfiprintf_r+0x1c6>
 8007068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800706a:	445a      	add	r2, fp
 800706c:	9209      	str	r2, [sp, #36]	; 0x24
 800706e:	f89a 3000 	ldrb.w	r3, [sl]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80a1 	beq.w	80071ba <_svfiprintf_r+0x1c6>
 8007078:	2300      	movs	r3, #0
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007082:	f10a 0a01 	add.w	sl, sl, #1
 8007086:	9304      	str	r3, [sp, #16]
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708e:	931a      	str	r3, [sp, #104]	; 0x68
 8007090:	4654      	mov	r4, sl
 8007092:	2205      	movs	r2, #5
 8007094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007098:	4850      	ldr	r0, [pc, #320]	; (80071dc <_svfiprintf_r+0x1e8>)
 800709a:	f7f9 f8a1 	bl	80001e0 <memchr>
 800709e:	9a04      	ldr	r2, [sp, #16]
 80070a0:	b9d8      	cbnz	r0, 80070da <_svfiprintf_r+0xe6>
 80070a2:	06d0      	lsls	r0, r2, #27
 80070a4:	bf44      	itt	mi
 80070a6:	2320      	movmi	r3, #32
 80070a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ac:	0711      	lsls	r1, r2, #28
 80070ae:	bf44      	itt	mi
 80070b0:	232b      	movmi	r3, #43	; 0x2b
 80070b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ba:	2b2a      	cmp	r3, #42	; 0x2a
 80070bc:	d015      	beq.n	80070ea <_svfiprintf_r+0xf6>
 80070be:	9a07      	ldr	r2, [sp, #28]
 80070c0:	4654      	mov	r4, sl
 80070c2:	2000      	movs	r0, #0
 80070c4:	f04f 0c0a 	mov.w	ip, #10
 80070c8:	4621      	mov	r1, r4
 80070ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ce:	3b30      	subs	r3, #48	; 0x30
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	d94d      	bls.n	8007170 <_svfiprintf_r+0x17c>
 80070d4:	b1b0      	cbz	r0, 8007104 <_svfiprintf_r+0x110>
 80070d6:	9207      	str	r2, [sp, #28]
 80070d8:	e014      	b.n	8007104 <_svfiprintf_r+0x110>
 80070da:	eba0 0308 	sub.w	r3, r0, r8
 80070de:	fa09 f303 	lsl.w	r3, r9, r3
 80070e2:	4313      	orrs	r3, r2
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	46a2      	mov	sl, r4
 80070e8:	e7d2      	b.n	8007090 <_svfiprintf_r+0x9c>
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	1d19      	adds	r1, r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	9103      	str	r1, [sp, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bfbb      	ittet	lt
 80070f6:	425b      	neglt	r3, r3
 80070f8:	f042 0202 	orrlt.w	r2, r2, #2
 80070fc:	9307      	strge	r3, [sp, #28]
 80070fe:	9307      	strlt	r3, [sp, #28]
 8007100:	bfb8      	it	lt
 8007102:	9204      	strlt	r2, [sp, #16]
 8007104:	7823      	ldrb	r3, [r4, #0]
 8007106:	2b2e      	cmp	r3, #46	; 0x2e
 8007108:	d10c      	bne.n	8007124 <_svfiprintf_r+0x130>
 800710a:	7863      	ldrb	r3, [r4, #1]
 800710c:	2b2a      	cmp	r3, #42	; 0x2a
 800710e:	d134      	bne.n	800717a <_svfiprintf_r+0x186>
 8007110:	9b03      	ldr	r3, [sp, #12]
 8007112:	1d1a      	adds	r2, r3, #4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	9203      	str	r2, [sp, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	bfb8      	it	lt
 800711c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007120:	3402      	adds	r4, #2
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071ec <_svfiprintf_r+0x1f8>
 8007128:	7821      	ldrb	r1, [r4, #0]
 800712a:	2203      	movs	r2, #3
 800712c:	4650      	mov	r0, sl
 800712e:	f7f9 f857 	bl	80001e0 <memchr>
 8007132:	b138      	cbz	r0, 8007144 <_svfiprintf_r+0x150>
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	eba0 000a 	sub.w	r0, r0, sl
 800713a:	2240      	movs	r2, #64	; 0x40
 800713c:	4082      	lsls	r2, r0
 800713e:	4313      	orrs	r3, r2
 8007140:	3401      	adds	r4, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007148:	4825      	ldr	r0, [pc, #148]	; (80071e0 <_svfiprintf_r+0x1ec>)
 800714a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714e:	2206      	movs	r2, #6
 8007150:	f7f9 f846 	bl	80001e0 <memchr>
 8007154:	2800      	cmp	r0, #0
 8007156:	d038      	beq.n	80071ca <_svfiprintf_r+0x1d6>
 8007158:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <_svfiprintf_r+0x1f0>)
 800715a:	bb1b      	cbnz	r3, 80071a4 <_svfiprintf_r+0x1b0>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	3307      	adds	r3, #7
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	4433      	add	r3, r6
 800716c:	9309      	str	r3, [sp, #36]	; 0x24
 800716e:	e768      	b.n	8007042 <_svfiprintf_r+0x4e>
 8007170:	fb0c 3202 	mla	r2, ip, r2, r3
 8007174:	460c      	mov	r4, r1
 8007176:	2001      	movs	r0, #1
 8007178:	e7a6      	b.n	80070c8 <_svfiprintf_r+0xd4>
 800717a:	2300      	movs	r3, #0
 800717c:	3401      	adds	r4, #1
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	4619      	mov	r1, r3
 8007182:	f04f 0c0a 	mov.w	ip, #10
 8007186:	4620      	mov	r0, r4
 8007188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718c:	3a30      	subs	r2, #48	; 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d903      	bls.n	800719a <_svfiprintf_r+0x1a6>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0c6      	beq.n	8007124 <_svfiprintf_r+0x130>
 8007196:	9105      	str	r1, [sp, #20]
 8007198:	e7c4      	b.n	8007124 <_svfiprintf_r+0x130>
 800719a:	fb0c 2101 	mla	r1, ip, r1, r2
 800719e:	4604      	mov	r4, r0
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7f0      	b.n	8007186 <_svfiprintf_r+0x192>
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <_svfiprintf_r+0x1f4>)
 80071ac:	a904      	add	r1, sp, #16
 80071ae:	4638      	mov	r0, r7
 80071b0:	f3af 8000 	nop.w
 80071b4:	1c42      	adds	r2, r0, #1
 80071b6:	4606      	mov	r6, r0
 80071b8:	d1d6      	bne.n	8007168 <_svfiprintf_r+0x174>
 80071ba:	89ab      	ldrh	r3, [r5, #12]
 80071bc:	065b      	lsls	r3, r3, #25
 80071be:	f53f af2d 	bmi.w	800701c <_svfiprintf_r+0x28>
 80071c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c4:	b01d      	add	sp, #116	; 0x74
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	ab03      	add	r3, sp, #12
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	462a      	mov	r2, r5
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <_svfiprintf_r+0x1f4>)
 80071d2:	a904      	add	r1, sp, #16
 80071d4:	4638      	mov	r0, r7
 80071d6:	f000 f879 	bl	80072cc <_printf_i>
 80071da:	e7eb      	b.n	80071b4 <_svfiprintf_r+0x1c0>
 80071dc:	08007978 	.word	0x08007978
 80071e0:	08007982 	.word	0x08007982
 80071e4:	00000000 	.word	0x00000000
 80071e8:	08006f41 	.word	0x08006f41
 80071ec:	0800797e 	.word	0x0800797e

080071f0 <_printf_common>:
 80071f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f4:	4616      	mov	r6, r2
 80071f6:	4699      	mov	r9, r3
 80071f8:	688a      	ldr	r2, [r1, #8]
 80071fa:	690b      	ldr	r3, [r1, #16]
 80071fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007200:	4293      	cmp	r3, r2
 8007202:	bfb8      	it	lt
 8007204:	4613      	movlt	r3, r2
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800720c:	4607      	mov	r7, r0
 800720e:	460c      	mov	r4, r1
 8007210:	b10a      	cbz	r2, 8007216 <_printf_common+0x26>
 8007212:	3301      	adds	r3, #1
 8007214:	6033      	str	r3, [r6, #0]
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	0699      	lsls	r1, r3, #26
 800721a:	bf42      	ittt	mi
 800721c:	6833      	ldrmi	r3, [r6, #0]
 800721e:	3302      	addmi	r3, #2
 8007220:	6033      	strmi	r3, [r6, #0]
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	f015 0506 	ands.w	r5, r5, #6
 8007228:	d106      	bne.n	8007238 <_printf_common+0x48>
 800722a:	f104 0a19 	add.w	sl, r4, #25
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	6832      	ldr	r2, [r6, #0]
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	42ab      	cmp	r3, r5
 8007236:	dc26      	bgt.n	8007286 <_printf_common+0x96>
 8007238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800723c:	1e13      	subs	r3, r2, #0
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	bf18      	it	ne
 8007242:	2301      	movne	r3, #1
 8007244:	0692      	lsls	r2, r2, #26
 8007246:	d42b      	bmi.n	80072a0 <_printf_common+0xb0>
 8007248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800724c:	4649      	mov	r1, r9
 800724e:	4638      	mov	r0, r7
 8007250:	47c0      	blx	r8
 8007252:	3001      	adds	r0, #1
 8007254:	d01e      	beq.n	8007294 <_printf_common+0xa4>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	f003 0306 	and.w	r3, r3, #6
 800725e:	2b04      	cmp	r3, #4
 8007260:	bf02      	ittt	eq
 8007262:	68e5      	ldreq	r5, [r4, #12]
 8007264:	6833      	ldreq	r3, [r6, #0]
 8007266:	1aed      	subeq	r5, r5, r3
 8007268:	68a3      	ldr	r3, [r4, #8]
 800726a:	bf0c      	ite	eq
 800726c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007270:	2500      	movne	r5, #0
 8007272:	4293      	cmp	r3, r2
 8007274:	bfc4      	itt	gt
 8007276:	1a9b      	subgt	r3, r3, r2
 8007278:	18ed      	addgt	r5, r5, r3
 800727a:	2600      	movs	r6, #0
 800727c:	341a      	adds	r4, #26
 800727e:	42b5      	cmp	r5, r6
 8007280:	d11a      	bne.n	80072b8 <_printf_common+0xc8>
 8007282:	2000      	movs	r0, #0
 8007284:	e008      	b.n	8007298 <_printf_common+0xa8>
 8007286:	2301      	movs	r3, #1
 8007288:	4652      	mov	r2, sl
 800728a:	4649      	mov	r1, r9
 800728c:	4638      	mov	r0, r7
 800728e:	47c0      	blx	r8
 8007290:	3001      	adds	r0, #1
 8007292:	d103      	bne.n	800729c <_printf_common+0xac>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	3501      	adds	r5, #1
 800729e:	e7c6      	b.n	800722e <_printf_common+0x3e>
 80072a0:	18e1      	adds	r1, r4, r3
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	2030      	movs	r0, #48	; 0x30
 80072a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072aa:	4422      	add	r2, r4
 80072ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b4:	3302      	adds	r3, #2
 80072b6:	e7c7      	b.n	8007248 <_printf_common+0x58>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4622      	mov	r2, r4
 80072bc:	4649      	mov	r1, r9
 80072be:	4638      	mov	r0, r7
 80072c0:	47c0      	blx	r8
 80072c2:	3001      	adds	r0, #1
 80072c4:	d0e6      	beq.n	8007294 <_printf_common+0xa4>
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7d9      	b.n	800727e <_printf_common+0x8e>
	...

080072cc <_printf_i>:
 80072cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	7e0f      	ldrb	r7, [r1, #24]
 80072d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d4:	2f78      	cmp	r7, #120	; 0x78
 80072d6:	4691      	mov	r9, r2
 80072d8:	4680      	mov	r8, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	469a      	mov	sl, r3
 80072de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072e2:	d807      	bhi.n	80072f4 <_printf_i+0x28>
 80072e4:	2f62      	cmp	r7, #98	; 0x62
 80072e6:	d80a      	bhi.n	80072fe <_printf_i+0x32>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	f000 80d4 	beq.w	8007496 <_printf_i+0x1ca>
 80072ee:	2f58      	cmp	r7, #88	; 0x58
 80072f0:	f000 80c0 	beq.w	8007474 <_printf_i+0x1a8>
 80072f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072fc:	e03a      	b.n	8007374 <_printf_i+0xa8>
 80072fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007302:	2b15      	cmp	r3, #21
 8007304:	d8f6      	bhi.n	80072f4 <_printf_i+0x28>
 8007306:	a101      	add	r1, pc, #4	; (adr r1, 800730c <_printf_i+0x40>)
 8007308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800730c:	08007365 	.word	0x08007365
 8007310:	08007379 	.word	0x08007379
 8007314:	080072f5 	.word	0x080072f5
 8007318:	080072f5 	.word	0x080072f5
 800731c:	080072f5 	.word	0x080072f5
 8007320:	080072f5 	.word	0x080072f5
 8007324:	08007379 	.word	0x08007379
 8007328:	080072f5 	.word	0x080072f5
 800732c:	080072f5 	.word	0x080072f5
 8007330:	080072f5 	.word	0x080072f5
 8007334:	080072f5 	.word	0x080072f5
 8007338:	0800747d 	.word	0x0800747d
 800733c:	080073a5 	.word	0x080073a5
 8007340:	08007437 	.word	0x08007437
 8007344:	080072f5 	.word	0x080072f5
 8007348:	080072f5 	.word	0x080072f5
 800734c:	0800749f 	.word	0x0800749f
 8007350:	080072f5 	.word	0x080072f5
 8007354:	080073a5 	.word	0x080073a5
 8007358:	080072f5 	.word	0x080072f5
 800735c:	080072f5 	.word	0x080072f5
 8007360:	0800743f 	.word	0x0800743f
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	602a      	str	r2, [r5, #0]
 800736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007374:	2301      	movs	r3, #1
 8007376:	e09f      	b.n	80074b8 <_printf_i+0x1ec>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	0607      	lsls	r7, r0, #24
 800737e:	f103 0104 	add.w	r1, r3, #4
 8007382:	6029      	str	r1, [r5, #0]
 8007384:	d501      	bpl.n	800738a <_printf_i+0xbe>
 8007386:	681e      	ldr	r6, [r3, #0]
 8007388:	e003      	b.n	8007392 <_printf_i+0xc6>
 800738a:	0646      	lsls	r6, r0, #25
 800738c:	d5fb      	bpl.n	8007386 <_printf_i+0xba>
 800738e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007392:	2e00      	cmp	r6, #0
 8007394:	da03      	bge.n	800739e <_printf_i+0xd2>
 8007396:	232d      	movs	r3, #45	; 0x2d
 8007398:	4276      	negs	r6, r6
 800739a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739e:	485a      	ldr	r0, [pc, #360]	; (8007508 <_printf_i+0x23c>)
 80073a0:	230a      	movs	r3, #10
 80073a2:	e012      	b.n	80073ca <_printf_i+0xfe>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	6820      	ldr	r0, [r4, #0]
 80073a8:	1d19      	adds	r1, r3, #4
 80073aa:	6029      	str	r1, [r5, #0]
 80073ac:	0605      	lsls	r5, r0, #24
 80073ae:	d501      	bpl.n	80073b4 <_printf_i+0xe8>
 80073b0:	681e      	ldr	r6, [r3, #0]
 80073b2:	e002      	b.n	80073ba <_printf_i+0xee>
 80073b4:	0641      	lsls	r1, r0, #25
 80073b6:	d5fb      	bpl.n	80073b0 <_printf_i+0xe4>
 80073b8:	881e      	ldrh	r6, [r3, #0]
 80073ba:	4853      	ldr	r0, [pc, #332]	; (8007508 <_printf_i+0x23c>)
 80073bc:	2f6f      	cmp	r7, #111	; 0x6f
 80073be:	bf0c      	ite	eq
 80073c0:	2308      	moveq	r3, #8
 80073c2:	230a      	movne	r3, #10
 80073c4:	2100      	movs	r1, #0
 80073c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ca:	6865      	ldr	r5, [r4, #4]
 80073cc:	60a5      	str	r5, [r4, #8]
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	bfa2      	ittt	ge
 80073d2:	6821      	ldrge	r1, [r4, #0]
 80073d4:	f021 0104 	bicge.w	r1, r1, #4
 80073d8:	6021      	strge	r1, [r4, #0]
 80073da:	b90e      	cbnz	r6, 80073e0 <_printf_i+0x114>
 80073dc:	2d00      	cmp	r5, #0
 80073de:	d04b      	beq.n	8007478 <_printf_i+0x1ac>
 80073e0:	4615      	mov	r5, r2
 80073e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80073e6:	fb03 6711 	mls	r7, r3, r1, r6
 80073ea:	5dc7      	ldrb	r7, [r0, r7]
 80073ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073f0:	4637      	mov	r7, r6
 80073f2:	42bb      	cmp	r3, r7
 80073f4:	460e      	mov	r6, r1
 80073f6:	d9f4      	bls.n	80073e2 <_printf_i+0x116>
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d10b      	bne.n	8007414 <_printf_i+0x148>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	07de      	lsls	r6, r3, #31
 8007400:	d508      	bpl.n	8007414 <_printf_i+0x148>
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	6861      	ldr	r1, [r4, #4]
 8007406:	4299      	cmp	r1, r3
 8007408:	bfde      	ittt	le
 800740a:	2330      	movle	r3, #48	; 0x30
 800740c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007414:	1b52      	subs	r2, r2, r5
 8007416:	6122      	str	r2, [r4, #16]
 8007418:	f8cd a000 	str.w	sl, [sp]
 800741c:	464b      	mov	r3, r9
 800741e:	aa03      	add	r2, sp, #12
 8007420:	4621      	mov	r1, r4
 8007422:	4640      	mov	r0, r8
 8007424:	f7ff fee4 	bl	80071f0 <_printf_common>
 8007428:	3001      	adds	r0, #1
 800742a:	d14a      	bne.n	80074c2 <_printf_i+0x1f6>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b004      	add	sp, #16
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f043 0320 	orr.w	r3, r3, #32
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	4833      	ldr	r0, [pc, #204]	; (800750c <_printf_i+0x240>)
 8007440:	2778      	movs	r7, #120	; 0x78
 8007442:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	6829      	ldr	r1, [r5, #0]
 800744a:	061f      	lsls	r7, r3, #24
 800744c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007450:	d402      	bmi.n	8007458 <_printf_i+0x18c>
 8007452:	065f      	lsls	r7, r3, #25
 8007454:	bf48      	it	mi
 8007456:	b2b6      	uxthmi	r6, r6
 8007458:	07df      	lsls	r7, r3, #31
 800745a:	bf48      	it	mi
 800745c:	f043 0320 	orrmi.w	r3, r3, #32
 8007460:	6029      	str	r1, [r5, #0]
 8007462:	bf48      	it	mi
 8007464:	6023      	strmi	r3, [r4, #0]
 8007466:	b91e      	cbnz	r6, 8007470 <_printf_i+0x1a4>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	f023 0320 	bic.w	r3, r3, #32
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	2310      	movs	r3, #16
 8007472:	e7a7      	b.n	80073c4 <_printf_i+0xf8>
 8007474:	4824      	ldr	r0, [pc, #144]	; (8007508 <_printf_i+0x23c>)
 8007476:	e7e4      	b.n	8007442 <_printf_i+0x176>
 8007478:	4615      	mov	r5, r2
 800747a:	e7bd      	b.n	80073f8 <_printf_i+0x12c>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	6826      	ldr	r6, [r4, #0]
 8007480:	6961      	ldr	r1, [r4, #20]
 8007482:	1d18      	adds	r0, r3, #4
 8007484:	6028      	str	r0, [r5, #0]
 8007486:	0635      	lsls	r5, r6, #24
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	d501      	bpl.n	8007490 <_printf_i+0x1c4>
 800748c:	6019      	str	r1, [r3, #0]
 800748e:	e002      	b.n	8007496 <_printf_i+0x1ca>
 8007490:	0670      	lsls	r0, r6, #25
 8007492:	d5fb      	bpl.n	800748c <_printf_i+0x1c0>
 8007494:	8019      	strh	r1, [r3, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	4615      	mov	r5, r2
 800749c:	e7bc      	b.n	8007418 <_printf_i+0x14c>
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	1d1a      	adds	r2, r3, #4
 80074a2:	602a      	str	r2, [r5, #0]
 80074a4:	681d      	ldr	r5, [r3, #0]
 80074a6:	6862      	ldr	r2, [r4, #4]
 80074a8:	2100      	movs	r1, #0
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7f8 fe98 	bl	80001e0 <memchr>
 80074b0:	b108      	cbz	r0, 80074b6 <_printf_i+0x1ea>
 80074b2:	1b40      	subs	r0, r0, r5
 80074b4:	6060      	str	r0, [r4, #4]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	2300      	movs	r3, #0
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c0:	e7aa      	b.n	8007418 <_printf_i+0x14c>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	462a      	mov	r2, r5
 80074c6:	4649      	mov	r1, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	47d0      	blx	sl
 80074cc:	3001      	adds	r0, #1
 80074ce:	d0ad      	beq.n	800742c <_printf_i+0x160>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	079b      	lsls	r3, r3, #30
 80074d4:	d413      	bmi.n	80074fe <_printf_i+0x232>
 80074d6:	68e0      	ldr	r0, [r4, #12]
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	4298      	cmp	r0, r3
 80074dc:	bfb8      	it	lt
 80074de:	4618      	movlt	r0, r3
 80074e0:	e7a6      	b.n	8007430 <_printf_i+0x164>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4632      	mov	r2, r6
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d09d      	beq.n	800742c <_printf_i+0x160>
 80074f0:	3501      	adds	r5, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	9903      	ldr	r1, [sp, #12]
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dcf2      	bgt.n	80074e2 <_printf_i+0x216>
 80074fc:	e7eb      	b.n	80074d6 <_printf_i+0x20a>
 80074fe:	2500      	movs	r5, #0
 8007500:	f104 0619 	add.w	r6, r4, #25
 8007504:	e7f5      	b.n	80074f2 <_printf_i+0x226>
 8007506:	bf00      	nop
 8007508:	08007989 	.word	0x08007989
 800750c:	0800799a 	.word	0x0800799a

08007510 <memmove>:
 8007510:	4288      	cmp	r0, r1
 8007512:	b510      	push	{r4, lr}
 8007514:	eb01 0402 	add.w	r4, r1, r2
 8007518:	d902      	bls.n	8007520 <memmove+0x10>
 800751a:	4284      	cmp	r4, r0
 800751c:	4623      	mov	r3, r4
 800751e:	d807      	bhi.n	8007530 <memmove+0x20>
 8007520:	1e43      	subs	r3, r0, #1
 8007522:	42a1      	cmp	r1, r4
 8007524:	d008      	beq.n	8007538 <memmove+0x28>
 8007526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752e:	e7f8      	b.n	8007522 <memmove+0x12>
 8007530:	4402      	add	r2, r0
 8007532:	4601      	mov	r1, r0
 8007534:	428a      	cmp	r2, r1
 8007536:	d100      	bne.n	800753a <memmove+0x2a>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007542:	e7f7      	b.n	8007534 <memmove+0x24>

08007544 <_sbrk_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_sbrk_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7f9 fe9e 	bl	8001290 <_sbrk>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_sbrk_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_sbrk_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20004cf4 	.word	0x20004cf4

08007564 <_realloc_r>:
 8007564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007568:	4680      	mov	r8, r0
 800756a:	4614      	mov	r4, r2
 800756c:	460e      	mov	r6, r1
 800756e:	b921      	cbnz	r1, 800757a <_realloc_r+0x16>
 8007570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	4611      	mov	r1, r2
 8007576:	f7ff bc57 	b.w	8006e28 <_malloc_r>
 800757a:	b92a      	cbnz	r2, 8007588 <_realloc_r+0x24>
 800757c:	f7ff fbe8 	bl	8006d50 <_free_r>
 8007580:	4625      	mov	r5, r4
 8007582:	4628      	mov	r0, r5
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	f000 f81b 	bl	80075c2 <_malloc_usable_size_r>
 800758c:	4284      	cmp	r4, r0
 800758e:	4607      	mov	r7, r0
 8007590:	d802      	bhi.n	8007598 <_realloc_r+0x34>
 8007592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007596:	d812      	bhi.n	80075be <_realloc_r+0x5a>
 8007598:	4621      	mov	r1, r4
 800759a:	4640      	mov	r0, r8
 800759c:	f7ff fc44 	bl	8006e28 <_malloc_r>
 80075a0:	4605      	mov	r5, r0
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d0ed      	beq.n	8007582 <_realloc_r+0x1e>
 80075a6:	42bc      	cmp	r4, r7
 80075a8:	4622      	mov	r2, r4
 80075aa:	4631      	mov	r1, r6
 80075ac:	bf28      	it	cs
 80075ae:	463a      	movcs	r2, r7
 80075b0:	f7ff fbc0 	bl	8006d34 <memcpy>
 80075b4:	4631      	mov	r1, r6
 80075b6:	4640      	mov	r0, r8
 80075b8:	f7ff fbca 	bl	8006d50 <_free_r>
 80075bc:	e7e1      	b.n	8007582 <_realloc_r+0x1e>
 80075be:	4635      	mov	r5, r6
 80075c0:	e7df      	b.n	8007582 <_realloc_r+0x1e>

080075c2 <_malloc_usable_size_r>:
 80075c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c6:	1f18      	subs	r0, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bfbc      	itt	lt
 80075cc:	580b      	ldrlt	r3, [r1, r0]
 80075ce:	18c0      	addlt	r0, r0, r3
 80075d0:	4770      	bx	lr
	...

080075d4 <_init>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr

080075e0 <_fini>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr
